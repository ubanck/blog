{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3c12ac5ec8fc6cd79c388a61d8e83420834e0211","modified":1458539285028},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1458544672238},{"_id":"themes/yilia/_config.yml","hash":"00a16737317ddbbb085b1465cd13ca2148888959","modified":1458550439342},{"_id":"themes/yilia/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1458544672298},{"_id":"source/_posts/GPU编程概述.md","hash":"bd1b6c98d16b33c1ef88a4a7008888f8ae106963","modified":1458620738494},{"_id":"source/_posts/shader-language概述.md","hash":"22371a8b0101d112b70bb1d5a2d8b246c821e205","modified":1458620731997},{"_id":"source/_posts/Lua-and-Unilua.md","hash":"b73fb587dd5b3fd93688f4ab3ae0b9b9a488e2c6","modified":1458620734670},{"_id":"source/_posts/搭建新的博客，独立域名.md","hash":"c52405e38c3c68d12a85a8e256aabd5d767ef369","modified":1458550303899},{"_id":"source/_posts/漫反射光照.md","hash":"9f497da23af8282e86d38e187f8b7e84402e179f","modified":1458620722526},{"_id":"source/_posts/线性插值.md","hash":"92b93e705b47efa6c92e348feb02eda854ad471f","modified":1458620690430},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"cc9b17297f99e76a01632dfc4b0d7a7cfbabc9f7","modified":1458548604721},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1458544672230},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"a603b84861f888955617da06635e675c2af4822d","modified":1458548604775},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1458544652305},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1458544672231},{"_id":"themes/yilia/.git/index","hash":"0b76001dd010b6a4ca7f6bbe34ebed155a190d54","modified":1458544672316},{"_id":"themes/yilia/.git/packed-refs","hash":"290776002dc1f4c0df9242d6e04d2f875a6dbe1b","modified":1458544672228},{"_id":"themes/yilia/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1458544672239},{"_id":"themes/yilia/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1458544672239},{"_id":"themes/yilia/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1458544672239},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1458544672239},{"_id":"themes/yilia/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1458544672239},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1458544672291},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1458544672291},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1458544672291},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1458544672297},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1458544672297},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1458544672297},{"_id":"themes/yilia/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1458544672297},{"_id":"themes/yilia/layout/page.ejs","hash":"072c1ff380a2d158df68320be5d9fd7b48163f2f","modified":1458611547366},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1458544672297},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1458544672298},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1458544652305},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1458544652305},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1458544652306},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1458544652306},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1458544652306},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1458544652306},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1458544652306},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1458544652307},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1458544652307},{"_id":"themes/yilia/.git/logs/HEAD","hash":"2a7e5859cb76c58db20c341f9cf732fbbc8f2a26","modified":1458544672231},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1458544652307},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"3709af4e8f7e1196dbd1f9dea62fa440d4b47836","modified":1458544672292},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1458544672292},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"63c041b2deec1607d47ad3a11f158de9d823fd66","modified":1458611045430},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"420b94c78832456686ebd9831a5bfcb05365645a","modified":1458544672293},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"138a4879b7b8b591a3533f38d41648203e8075ea","modified":1458621345872},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1458544672294},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"2bbf5aad03f54055d9d7852e70ff7e6952a41f26","modified":1458544672294},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1458544672294},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"b03e8424b4798d4887801afdfae457fbf6027838","modified":1458544672294},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1458544672294},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"6a7a2a4960dabf9d7cd523573da7869eebf4b02d","modified":1458544672295},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1458544672298},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1458544672298},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1458544672302},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1458544672306},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458544672306},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458544672306},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458544672306},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458544672307},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458544672307},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1458544672309},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458544672307},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1458544672309},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1458544672309},{"_id":"themes/yilia/source/img/avatar.png","hash":"89a51c63d4e10fc1fb31ba0c56adf68146ccc2d6","modified":1458550605327},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1458544672310},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1458544672311},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1458544672311},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1458544672311},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1458544672311},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1458544672312},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1458544672312},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1458544672312},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1458544672312},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1458544672312},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1458544672312},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1458544672313},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1458544672313},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1458544672313},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1458544672313},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1458544672313},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1458544672314},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1458544672314},{"_id":"themes/yilia/source/js/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1458544672314},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1458544672314},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1458544672315},{"_id":"themes/yilia/source/js/mobile.js","hash":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1458544672315},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1458544672315},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1458544672314},{"_id":"themes/yilia/.git/objects/pack/pack-e9c381e9c8e0602288d128f91b570ab731e8020f.idx","hash":"db619f8e8a36915118e0f7f5ca4bd448560eaff8","modified":1458544671978},{"_id":"themes/yilia/.git/refs/heads/master","hash":"a603b84861f888955617da06635e675c2af4822d","modified":1458544672230},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1458544672295},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1458544672295},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"c115c282eebfb6b18612d2d8733272c270b03066","modified":1458544672295},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"4ab6cab2a975a4df8419448b33dec4724279d85c","modified":1458544672296},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"d50294bf9858e7942208c380e851a37ed37f1d6f","modified":1458544672296},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1458544672295},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1458544672296},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1458544672297},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1458544672299},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1458544672299},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1458544672299},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1458544672299},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1458544672300},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1458544672300},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1458544672300},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1458544672300},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1458544672300},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1458544672301},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1458544672301},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1458544672301},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1458544672301},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1458544672301},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1458544672301},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1458544672302},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1458544672303},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1458544672305},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1458544672305},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1458544672305},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458544672307},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1458544672308},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1458544672307},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1458544672308},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1458544672308},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1458544672308},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1458544672304},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"2a7e5859cb76c58db20c341f9cf732fbbc8f2a26","modified":1458544672230},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1458544672229},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"2a7e5859cb76c58db20c341f9cf732fbbc8f2a26","modified":1458544672229},{"_id":"themes/yilia/.git/objects/pack/pack-e9c381e9c8e0602288d128f91b570ab731e8020f.pack","hash":"53df37bbdb47202be2c6441fc5ce9dd642da732b","modified":1458544672077},{"_id":"public/sitemap.xml","hash":"7df390636f8555ea40c21c5efd906fe670975117","modified":1458985744369},{"_id":"public/2016/03/21/搭建新的博客，独立域名/index.html","hash":"eba8bef2ef2ef97cb6256d5f44fdd351fdc78f24","modified":1458985744425},{"_id":"public/2016/03/21/线性插值/index.html","hash":"f4d1ce3f62790393dd632cc553201d61067e516b","modified":1458985744425},{"_id":"public/archives/index.html","hash":"c1a6aba827c87d0732527946ddaf2372b968f24b","modified":1458985744425},{"_id":"public/archives/2016/index.html","hash":"5e219f357b09e01670584320f0b8036ba3c6b582","modified":1458985744425},{"_id":"public/archives/2016/03/index.html","hash":"db9cd4bbed19294faf210f9c81e4e8727dc200b5","modified":1458985744425},{"_id":"public/index.html","hash":"1b7c1cb790408ebc467892880a316261ab6eb9a5","modified":1458985744425},{"_id":"public/2016/03/21/Lua-and-Unilua/index.html","hash":"5584c1a3fc61408483f586937ba349e3d20f8894","modified":1458985744425},{"_id":"public/2016/03/21/shader-language概述/index.html","hash":"fefb3920af299285cf4ca2274c94aea022332a99","modified":1458985744425},{"_id":"public/2016/03/21/GPU编程概述/index.html","hash":"f5e778c8a8717ded595e886d70ee131c6c52bd36","modified":1458985744425},{"_id":"public/2016/03/21/漫反射光照/index.html","hash":"194ecc364b2ff91feeba5a3b4cde8c3d55cda230","modified":1458985744425},{"_id":"public/CNAME","hash":"3c12ac5ec8fc6cd79c388a61d8e83420834e0211","modified":1458985744436},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458985744436},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458985744437},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458985744437},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458985744437},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458985744437},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458985744437},{"_id":"public/img/avatar.png","hash":"89a51c63d4e10fc1fb31ba0c56adf68146ccc2d6","modified":1458985744437},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1458985744437},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1458985744437},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1458985744438},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1458985744439},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1458985744439},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1458985744439},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1458985744439},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1458985744439},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1458985744439},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1458985744439},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1458985744439},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1458985744439},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1458985744439},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1458985744439},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1458985744439},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1458985744439},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1458985744439},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1458985744440},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1458985744440},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1458985744440},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1458985744440},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1458985744440},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458985744440},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1458985745189},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1458985745196},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1458985745196},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1458985745196},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1458985745196},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1458985745196},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1458985745196},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1458985745196},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1458985745196},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1458985745196},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1458985745197},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1458985745197},{"_id":"public/css/style.css","hash":"10e9b93cf935a165020e48334a40b84b0f895401","modified":1458985745197},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1458985745197},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1458985745197}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"shader language概述","date":"2016-03-21T11:18:54.000Z","_content":"　　从硬件上讲，GPU内部有顶点着色器与片段着色器，从渲染管线来看，顶点着色器控制这顶点的坐标转换过程，片段着色器控制像素的颜色计算过程。顶点着色器将顶点转换完成，输入到片段着色器进行处理（片段着色器具有检索纹理信息的能力，对于GPU而言，纹理等价于数组，暂时顶点着色器还不具备）\n\n　　顶点着色程序从寄存器中提取出图元信息，所谓的图元信息包括（顶点的位置，法向量，纹理坐标），这些信息是来自于应用程序端，如果有DX或者OpenGL编程经验的，应该对这个很了解。获得图元信息之后，顶点着色程序完成 顶点坐标空间转换、法向量空间转换，光照计算等操作过程。\n<!--more-->\n　　上一篇文章提到顶点坐标一开始是在模型空间坐标系，然后到世界空间坐标系等等，而光照计算也在这个阶段完成，因为光照会牵涉到法向量，所以需要在世界空间坐标系中做处理。完成这些之后，数据传输给了片段着色器，这个时候的数据里面包含的是纹理坐标和光照信息等等，片段着色器拿到之后，进行每个片段的颜色计算，最后将处理后的数据送到光栅化操作模块，所谓的光栅化操作模块执行的操作就是将颜色赋值到对应的像素点，这个操作就叫做光栅化！\n\n　　那么我们可以这样说，顶点着色程序主要进行几何方面的计算，而片段着是器主要是针对最终的颜色进行计算。笔记：片段是啥？顶点好理解，像素也好理解，那啥是片段呢？片段其实就是光栅化之后的数据集合，这些数据还没经过深度值比较，而像素是经过比较了的。\n\n　　讲完了GPU的执行过程与基本原理，那就该到正题了，就得说到我们的shader编程了，只要一说到编程，就会提到语言，shader语言现在说起来应该是三种 DX的HLSL(high level shading language),OpenGL的GLSL(OpenGL shading language)还有nvidia的CG(C for Graphics)！！！HLSL和GLSL的本质上是差不多的，而CG语言运行在DX和OpenGL的上层，能被这两者很好的支持，并且因为我本身目前使用Unity3D开发游戏，还有就是CG写起来很方便，所以shader的讲解就会围绕CG来讲！CG的语法我就不详细讲解了，这玩意儿可以参考官方文档，而且你看名字就能感觉到，肯定跟C差不多。相关的函数：http://http.developer.nvidia.com/Cg/index.html。\n\n　　到这里基础全部铺垫完毕，其中那些变换的细节需要参与的数学公式推导暂时不表，读者只需要知道用公式那么算就好，推导过程可以参见《3D数学基础：图形与游戏开发》一书，里面对这方面进行了比较详细的讲解。","source":"_posts/shader-language概述.md","raw":"---\ntitle: shader language概述\ndate: 2016-03-21 19:18:54\ntags:\n---\n　　从硬件上讲，GPU内部有顶点着色器与片段着色器，从渲染管线来看，顶点着色器控制这顶点的坐标转换过程，片段着色器控制像素的颜色计算过程。顶点着色器将顶点转换完成，输入到片段着色器进行处理（片段着色器具有检索纹理信息的能力，对于GPU而言，纹理等价于数组，暂时顶点着色器还不具备）\n\n　　顶点着色程序从寄存器中提取出图元信息，所谓的图元信息包括（顶点的位置，法向量，纹理坐标），这些信息是来自于应用程序端，如果有DX或者OpenGL编程经验的，应该对这个很了解。获得图元信息之后，顶点着色程序完成 顶点坐标空间转换、法向量空间转换，光照计算等操作过程。\n<!--more-->\n　　上一篇文章提到顶点坐标一开始是在模型空间坐标系，然后到世界空间坐标系等等，而光照计算也在这个阶段完成，因为光照会牵涉到法向量，所以需要在世界空间坐标系中做处理。完成这些之后，数据传输给了片段着色器，这个时候的数据里面包含的是纹理坐标和光照信息等等，片段着色器拿到之后，进行每个片段的颜色计算，最后将处理后的数据送到光栅化操作模块，所谓的光栅化操作模块执行的操作就是将颜色赋值到对应的像素点，这个操作就叫做光栅化！\n\n　　那么我们可以这样说，顶点着色程序主要进行几何方面的计算，而片段着是器主要是针对最终的颜色进行计算。笔记：片段是啥？顶点好理解，像素也好理解，那啥是片段呢？片段其实就是光栅化之后的数据集合，这些数据还没经过深度值比较，而像素是经过比较了的。\n\n　　讲完了GPU的执行过程与基本原理，那就该到正题了，就得说到我们的shader编程了，只要一说到编程，就会提到语言，shader语言现在说起来应该是三种 DX的HLSL(high level shading language),OpenGL的GLSL(OpenGL shading language)还有nvidia的CG(C for Graphics)！！！HLSL和GLSL的本质上是差不多的，而CG语言运行在DX和OpenGL的上层，能被这两者很好的支持，并且因为我本身目前使用Unity3D开发游戏，还有就是CG写起来很方便，所以shader的讲解就会围绕CG来讲！CG的语法我就不详细讲解了，这玩意儿可以参考官方文档，而且你看名字就能感觉到，肯定跟C差不多。相关的函数：http://http.developer.nvidia.com/Cg/index.html。\n\n　　到这里基础全部铺垫完毕，其中那些变换的细节需要参与的数学公式推导暂时不表，读者只需要知道用公式那么算就好，推导过程可以参见《3D数学基础：图形与游戏开发》一书，里面对这方面进行了比较详细的讲解。","slug":"shader-language概述","published":1,"updated":"2016-03-22T04:25:31.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cim8yfwvh0000r8kooiqsuzlq","content":"<p>&#x4ECE;&#x786C;&#x4EF6;&#x4E0A;&#x8BB2;&#xFF0C;GPU&#x5185;&#x90E8;&#x6709;&#x9876;&#x70B9;&#x7740;&#x8272;&#x5668;&#x4E0E;&#x7247;&#x6BB5;&#x7740;&#x8272;&#x5668;&#xFF0C;&#x4ECE;&#x6E32;&#x67D3;&#x7BA1;&#x7EBF;&#x6765;&#x770B;&#xFF0C;&#x9876;&#x70B9;&#x7740;&#x8272;&#x5668;&#x63A7;&#x5236;&#x8FD9;&#x9876;&#x70B9;&#x7684;&#x5750;&#x6807;&#x8F6C;&#x6362;&#x8FC7;&#x7A0B;&#xFF0C;&#x7247;&#x6BB5;&#x7740;&#x8272;&#x5668;&#x63A7;&#x5236;&#x50CF;&#x7D20;&#x7684;&#x989C;&#x8272;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#x3002;&#x9876;&#x70B9;&#x7740;&#x8272;&#x5668;&#x5C06;&#x9876;&#x70B9;&#x8F6C;&#x6362;&#x5B8C;&#x6210;&#xFF0C;&#x8F93;&#x5165;&#x5230;&#x7247;&#x6BB5;&#x7740;&#x8272;&#x5668;&#x8FDB;&#x884C;&#x5904;&#x7406;&#xFF08;&#x7247;&#x6BB5;&#x7740;&#x8272;&#x5668;&#x5177;&#x6709;&#x68C0;&#x7D22;&#x7EB9;&#x7406;&#x4FE1;&#x606F;&#x7684;&#x80FD;&#x529B;&#xFF0C;&#x5BF9;&#x4E8E;GPU&#x800C;&#x8A00;&#xFF0C;&#x7EB9;&#x7406;&#x7B49;&#x4EF7;&#x4E8E;&#x6570;&#x7EC4;&#xFF0C;&#x6682;&#x65F6;&#x9876;&#x70B9;&#x7740;&#x8272;&#x5668;&#x8FD8;&#x4E0D;&#x5177;&#x5907;&#xFF09;</p>\n<p>&#x3000;&#x3000;&#x9876;&#x70B9;&#x7740;&#x8272;&#x7A0B;&#x5E8F;&#x4ECE;&#x5BC4;&#x5B58;&#x5668;&#x4E2D;&#x63D0;&#x53D6;&#x51FA;&#x56FE;&#x5143;&#x4FE1;&#x606F;&#xFF0C;&#x6240;&#x8C13;&#x7684;&#x56FE;&#x5143;&#x4FE1;&#x606F;&#x5305;&#x62EC;&#xFF08;&#x9876;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6CD5;&#x5411;&#x91CF;&#xFF0C;&#x7EB9;&#x7406;&#x5750;&#x6807;&#xFF09;&#xFF0C;&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#x662F;&#x6765;&#x81EA;&#x4E8E;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x7AEF;&#xFF0C;&#x5982;&#x679C;&#x6709;DX&#x6216;&#x8005;OpenGL&#x7F16;&#x7A0B;&#x7ECF;&#x9A8C;&#x7684;&#xFF0C;&#x5E94;&#x8BE5;&#x5BF9;&#x8FD9;&#x4E2A;&#x5F88;&#x4E86;&#x89E3;&#x3002;&#x83B7;&#x5F97;&#x56FE;&#x5143;&#x4FE1;&#x606F;&#x4E4B;&#x540E;&#xFF0C;&#x9876;&#x70B9;&#x7740;&#x8272;&#x7A0B;&#x5E8F;&#x5B8C;&#x6210; &#x9876;&#x70B9;&#x5750;&#x6807;&#x7A7A;&#x95F4;&#x8F6C;&#x6362;&#x3001;&#x6CD5;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x8F6C;&#x6362;&#xFF0C;&#x5149;&#x7167;&#x8BA1;&#x7B97;&#x7B49;&#x64CD;&#x4F5C;&#x8FC7;&#x7A0B;&#x3002;<br><a id=\"more\"></a><br>&#x3000;&#x3000;&#x4E0A;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x63D0;&#x5230;&#x9876;&#x70B9;&#x5750;&#x6807;&#x4E00;&#x5F00;&#x59CB;&#x662F;&#x5728;&#x6A21;&#x578B;&#x7A7A;&#x95F4;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x7136;&#x540E;&#x5230;&#x4E16;&#x754C;&#x7A7A;&#x95F4;&#x5750;&#x6807;&#x7CFB;&#x7B49;&#x7B49;&#xFF0C;&#x800C;&#x5149;&#x7167;&#x8BA1;&#x7B97;&#x4E5F;&#x5728;&#x8FD9;&#x4E2A;&#x9636;&#x6BB5;&#x5B8C;&#x6210;&#xFF0C;&#x56E0;&#x4E3A;&#x5149;&#x7167;&#x4F1A;&#x7275;&#x6D89;&#x5230;&#x6CD5;&#x5411;&#x91CF;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x5728;&#x4E16;&#x754C;&#x7A7A;&#x95F4;&#x5750;&#x6807;&#x7CFB;&#x4E2D;&#x505A;&#x5904;&#x7406;&#x3002;&#x5B8C;&#x6210;&#x8FD9;&#x4E9B;&#x4E4B;&#x540E;&#xFF0C;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x7ED9;&#x4E86;&#x7247;&#x6BB5;&#x7740;&#x8272;&#x5668;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x7684;&#x6570;&#x636E;&#x91CC;&#x9762;&#x5305;&#x542B;&#x7684;&#x662F;&#x7EB9;&#x7406;&#x5750;&#x6807;&#x548C;&#x5149;&#x7167;&#x4FE1;&#x606F;&#x7B49;&#x7B49;&#xFF0C;&#x7247;&#x6BB5;&#x7740;&#x8272;&#x5668;&#x62FF;&#x5230;&#x4E4B;&#x540E;&#xFF0C;&#x8FDB;&#x884C;&#x6BCF;&#x4E2A;&#x7247;&#x6BB5;&#x7684;&#x989C;&#x8272;&#x8BA1;&#x7B97;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x5904;&#x7406;&#x540E;&#x7684;&#x6570;&#x636E;&#x9001;&#x5230;&#x5149;&#x6805;&#x5316;&#x64CD;&#x4F5C;&#x6A21;&#x5757;&#xFF0C;&#x6240;&#x8C13;&#x7684;&#x5149;&#x6805;&#x5316;&#x64CD;&#x4F5C;&#x6A21;&#x5757;&#x6267;&#x884C;&#x7684;&#x64CD;&#x4F5C;&#x5C31;&#x662F;&#x5C06;&#x989C;&#x8272;&#x8D4B;&#x503C;&#x5230;&#x5BF9;&#x5E94;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x5C31;&#x53EB;&#x505A;&#x5149;&#x6805;&#x5316;&#xFF01;</p>\n<p>&#x3000;&#x3000;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x8BF4;&#xFF0C;&#x9876;&#x70B9;&#x7740;&#x8272;&#x7A0B;&#x5E8F;&#x4E3B;&#x8981;&#x8FDB;&#x884C;&#x51E0;&#x4F55;&#x65B9;&#x9762;&#x7684;&#x8BA1;&#x7B97;&#xFF0C;&#x800C;&#x7247;&#x6BB5;&#x7740;&#x662F;&#x5668;&#x4E3B;&#x8981;&#x662F;&#x9488;&#x5BF9;&#x6700;&#x7EC8;&#x7684;&#x989C;&#x8272;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x3002;&#x7B14;&#x8BB0;&#xFF1A;&#x7247;&#x6BB5;&#x662F;&#x5565;&#xFF1F;&#x9876;&#x70B9;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x50CF;&#x7D20;&#x4E5F;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x90A3;&#x5565;&#x662F;&#x7247;&#x6BB5;&#x5462;&#xFF1F;&#x7247;&#x6BB5;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x5149;&#x6805;&#x5316;&#x4E4B;&#x540E;&#x7684;&#x6570;&#x636E;&#x96C6;&#x5408;&#xFF0C;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x8FD8;&#x6CA1;&#x7ECF;&#x8FC7;&#x6DF1;&#x5EA6;&#x503C;&#x6BD4;&#x8F83;&#xFF0C;&#x800C;&#x50CF;&#x7D20;&#x662F;&#x7ECF;&#x8FC7;&#x6BD4;&#x8F83;&#x4E86;&#x7684;&#x3002;</p>\n<p>&#x3000;&#x3000;&#x8BB2;&#x5B8C;&#x4E86;GPU&#x7684;&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4E0E;&#x57FA;&#x672C;&#x539F;&#x7406;&#xFF0C;&#x90A3;&#x5C31;&#x8BE5;&#x5230;&#x6B63;&#x9898;&#x4E86;&#xFF0C;&#x5C31;&#x5F97;&#x8BF4;&#x5230;&#x6211;&#x4EEC;&#x7684;shader&#x7F16;&#x7A0B;&#x4E86;&#xFF0C;&#x53EA;&#x8981;&#x4E00;&#x8BF4;&#x5230;&#x7F16;&#x7A0B;&#xFF0C;&#x5C31;&#x4F1A;&#x63D0;&#x5230;&#x8BED;&#x8A00;&#xFF0C;shader&#x8BED;&#x8A00;&#x73B0;&#x5728;&#x8BF4;&#x8D77;&#x6765;&#x5E94;&#x8BE5;&#x662F;&#x4E09;&#x79CD; DX&#x7684;HLSL(high level shading language),OpenGL&#x7684;GLSL(OpenGL shading language)&#x8FD8;&#x6709;nvidia&#x7684;CG(C for Graphics)&#xFF01;&#xFF01;&#xFF01;HLSL&#x548C;GLSL&#x7684;&#x672C;&#x8D28;&#x4E0A;&#x662F;&#x5DEE;&#x4E0D;&#x591A;&#x7684;&#xFF0C;&#x800C;CG&#x8BED;&#x8A00;&#x8FD0;&#x884C;&#x5728;DX&#x548C;OpenGL&#x7684;&#x4E0A;&#x5C42;&#xFF0C;&#x80FD;&#x88AB;&#x8FD9;&#x4E24;&#x8005;&#x5F88;&#x597D;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x5E76;&#x4E14;&#x56E0;&#x4E3A;&#x6211;&#x672C;&#x8EAB;&#x76EE;&#x524D;&#x4F7F;&#x7528;Unity3D&#x5F00;&#x53D1;&#x6E38;&#x620F;&#xFF0C;&#x8FD8;&#x6709;&#x5C31;&#x662F;CG&#x5199;&#x8D77;&#x6765;&#x5F88;&#x65B9;&#x4FBF;&#xFF0C;&#x6240;&#x4EE5;shader&#x7684;&#x8BB2;&#x89E3;&#x5C31;&#x4F1A;&#x56F4;&#x7ED5;CG&#x6765;&#x8BB2;&#xFF01;CG&#x7684;&#x8BED;&#x6CD5;&#x6211;&#x5C31;&#x4E0D;&#x8BE6;&#x7EC6;&#x8BB2;&#x89E3;&#x4E86;&#xFF0C;&#x8FD9;&#x73A9;&#x610F;&#x513F;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x5B98;&#x65B9;&#x6587;&#x6863;&#xFF0C;&#x800C;&#x4E14;&#x4F60;&#x770B;&#x540D;&#x5B57;&#x5C31;&#x80FD;&#x611F;&#x89C9;&#x5230;&#xFF0C;&#x80AF;&#x5B9A;&#x8DDF;C&#x5DEE;&#x4E0D;&#x591A;&#x3002;&#x76F8;&#x5173;&#x7684;&#x51FD;&#x6570;&#xFF1A;<a href=\"http://http.developer.nvidia.com/Cg/index.html&#x3002;\" target=\"_blank\" rel=\"external\">http://http.developer.nvidia.com/Cg/index.html&#x3002;</a></p>\n<p>&#x3000;&#x3000;&#x5230;&#x8FD9;&#x91CC;&#x57FA;&#x7840;&#x5168;&#x90E8;&#x94FA;&#x57AB;&#x5B8C;&#x6BD5;&#xFF0C;&#x5176;&#x4E2D;&#x90A3;&#x4E9B;&#x53D8;&#x6362;&#x7684;&#x7EC6;&#x8282;&#x9700;&#x8981;&#x53C2;&#x4E0E;&#x7684;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x63A8;&#x5BFC;&#x6682;&#x65F6;&#x4E0D;&#x8868;&#xFF0C;&#x8BFB;&#x8005;&#x53EA;&#x9700;&#x8981;&#x77E5;&#x9053;&#x7528;&#x516C;&#x5F0F;&#x90A3;&#x4E48;&#x7B97;&#x5C31;&#x597D;&#xFF0C;&#x63A8;&#x5BFC;&#x8FC7;&#x7A0B;&#x53EF;&#x4EE5;&#x53C2;&#x89C1;&#x300A;3D&#x6570;&#x5B66;&#x57FA;&#x7840;&#xFF1A;&#x56FE;&#x5F62;&#x4E0E;&#x6E38;&#x620F;&#x5F00;&#x53D1;&#x300B;&#x4E00;&#x4E66;&#xFF0C;&#x91CC;&#x9762;&#x5BF9;&#x8FD9;&#x65B9;&#x9762;&#x8FDB;&#x884C;&#x4E86;&#x6BD4;&#x8F83;&#x8BE6;&#x7EC6;&#x7684;&#x8BB2;&#x89E3;&#x3002;</p>\n","excerpt":"<p>从硬件上讲，GPU内部有顶点着色器与片段着色器，从渲染管线来看，顶点着色器控制这顶点的坐标转换过程，片段着色器控制像素的颜色计算过程。顶点着色器将顶点转换完成，输入到片段着色器进行处理（片段着色器具有检索纹理信息的能力，对于GPU而言，纹理等价于数组，暂时顶点着色器还不具备）</p>\n<p>　　顶点着色程序从寄存器中提取出图元信息，所谓的图元信息包括（顶点的位置，法向量，纹理坐标），这些信息是来自于应用程序端，如果有DX或者OpenGL编程经验的，应该对这个很了解。获得图元信息之后，顶点着色程序完成 顶点坐标空间转换、法向量空间转换，光照计算等操作过程。<br>","more":"<br>　　上一篇文章提到顶点坐标一开始是在模型空间坐标系，然后到世界空间坐标系等等，而光照计算也在这个阶段完成，因为光照会牵涉到法向量，所以需要在世界空间坐标系中做处理。完成这些之后，数据传输给了片段着色器，这个时候的数据里面包含的是纹理坐标和光照信息等等，片段着色器拿到之后，进行每个片段的颜色计算，最后将处理后的数据送到光栅化操作模块，所谓的光栅化操作模块执行的操作就是将颜色赋值到对应的像素点，这个操作就叫做光栅化！</p>\n<p>　　那么我们可以这样说，顶点着色程序主要进行几何方面的计算，而片段着是器主要是针对最终的颜色进行计算。笔记：片段是啥？顶点好理解，像素也好理解，那啥是片段呢？片段其实就是光栅化之后的数据集合，这些数据还没经过深度值比较，而像素是经过比较了的。</p>\n<p>　　讲完了GPU的执行过程与基本原理，那就该到正题了，就得说到我们的shader编程了，只要一说到编程，就会提到语言，shader语言现在说起来应该是三种 DX的HLSL(high level shading language),OpenGL的GLSL(OpenGL shading language)还有nvidia的CG(C for Graphics)！！！HLSL和GLSL的本质上是差不多的，而CG语言运行在DX和OpenGL的上层，能被这两者很好的支持，并且因为我本身目前使用Unity3D开发游戏，还有就是CG写起来很方便，所以shader的讲解就会围绕CG来讲！CG的语法我就不详细讲解了，这玩意儿可以参考官方文档，而且你看名字就能感觉到，肯定跟C差不多。相关的函数：<a href=\"http://http.developer.nvidia.com/Cg/index.html。\">http://http.developer.nvidia.com/Cg/index.html。</a></p>\n<p>　　到这里基础全部铺垫完毕，其中那些变换的细节需要参与的数学公式推导暂时不表，读者只需要知道用公式那么算就好，推导过程可以参见《3D数学基础：图形与游戏开发》一书，里面对这方面进行了比较详细的讲解。</p>"},{"title":"GPU编程概述","date":"2016-03-21T11:17:42.000Z","_content":"#GPU编程概述\n------\n### 1. 2D展示\n如果在2D上面，很简单，完全可以看作是一张图贴在屏幕上就OK。在3D上面，就复杂了一点，首先，我们的屏幕上2D的，不像现实世界，是三维空间！那么怎么在屏幕上画东西才能看上去有3D效果呢，你可以试试在纸上画一个立方体，学过数学都会画，你第一眼看上去就会觉得这是3D的，而不是一个简单的矩形！　　\n\n### 2.模型坐标系\n模型坐标系：在计算机的3D世界里，也是通过这样一种东西来实现了3D效果。如果在计算机屏幕上面绘制3D模型，那么我们首先在3D软件上制作出这个模型，这个模型会有一个原点，来建一个坐标系，无论是左手还是右手都差不多，这个坐标系，我们就叫做模型坐标系，那么这个模型的每个部位都相对于原点有一个坐标。\n<!--more-->\n### 3. 世界坐标系\n世界坐标系：既然每个模型都有一个坐标系，就相当于你自己举着手，你的手在脸的正前方，那么相对于旁边的人，你的手在哪儿。那么就会有了一个概念叫世界坐标系，在世界坐标系中，每个模型的坐标都是相对于世界坐标系原点的，那么除非重叠，否则是不可能出现坐标一样的情况。就相当于你站的位置，不会再有人站了一样。而我们的光照计算也会是在世界坐标系中进行。\n\n### 4. 摄影坐标系\n摄影坐标系：每个人都是在以自己的眼睛来看这个世界，比如你转动你的眼睛，看到的事物就会不一样。同样，在计算机的世界里，每次只能从唯一的视角出发来渲染物体，3D游戏都会提供摄像机漫游的功能，屏幕显示的内容会随着摄像机的变化而变化，这是因为GPU将物体的顶点坐标从世界坐标系转到了摄像机坐标系。所谓的摄像机坐标系，是以摄像机为原点，由视线方向，视角和远近平面，组成的一个梯形体的三维空间，叫做viewing frustum(视锥体）\n\n既然可以看见的区域已经确定，那么GPU就得做一下筛检，就像你面朝大海，即便春暖花开，你也只能看到你朝着的那面，你背后的风景你是看不到的，但那又客观存在着。这个时候，GPU就得做一下裁剪，在这个区域内的东西才会渲染，不在这个区域内的，那就只能被抛弃了，这一步叫做裁剪（clip）,怎么判断物体在不在这个区域的过程，叫做裁剪算法。\n\n至于怎么裁剪的，过程算法比较复杂，请自行参阅资料（这个过程也可以在应用程序中做）。裁剪过后，你这些东西都还是在3D空间里面的概念，而始终得显示在二维的屏幕上面，那么就得有个过程叫做屏幕映射，也就是说将3D的东西在2D的平面上显示出来就如同将这个立方体画在纸上，而你一看到一张纸上画的图，还是看出3D效果来。\n\n之后的步骤，叫做图元装配，根据顶点的位置和索引关系，组成线和面，然后将超出屏幕外的三角形进行裁剪，就像一个三角形有一个顶点在屏幕外，剪掉之后，这三角形就会变成四边形了。接下来的过程，叫做光栅化，所谓光栅化，就是给显示器的像素点赋值，屏幕是由一个一个的像素点构成，给每个点赋值上相应的颜色，连起来就是一整个屏幕了，结果之前的过程，我们可以得到每个点的屏幕坐标值，也知道我们要绘制成啥样（点，线，面）其中还有个问题，如图\n\n \n之后，我们就需要知道每个顶点的颜色了，这个颜色也在顶点信息之中，其中会牵涉到一种情况叫做混色，是根据当前的颜色跟正在计算的颜色的透明值，混合为一种颜色进行输出，也就是我们常说的Alpha值，一般叫做alpha混合技术，每个像素都关联一个RGB颜色值和一个A值，Alpha值用来描述物体的透明度.\n\n计算公式为newColor=curColor*a+(1-a)*nextColor   。混合之后，颜色被写入帧缓存中。那么如果同样一个位置的，有两个顶点，如果有两种颜色，而且都不透明，那么，到底是绘制那一种颜色呢？这里就有一个概念，叫做Z Buffer一般叫Z缓冲区，或者叫深度缓冲区，用来确定这个遮挡关系，这个值在（0,1）值越小，离近裁屏幕就更近，想象一下，在现实生活中，两块木板竖着叠在你面前，你当然只能看到近的那块。那么，GPU通过比较来判断顶点之间的遮挡关系，这个值其实也只是一个相对的大小，完全就是用来比较才有用的。　","source":"_posts/GPU编程概述.md","raw":"---\ntitle: GPU编程概述\ndate: 2016-03-21 19:17:42\ntags:\n---\n#GPU编程概述\n------\n### 1. 2D展示\n如果在2D上面，很简单，完全可以看作是一张图贴在屏幕上就OK。在3D上面，就复杂了一点，首先，我们的屏幕上2D的，不像现实世界，是三维空间！那么怎么在屏幕上画东西才能看上去有3D效果呢，你可以试试在纸上画一个立方体，学过数学都会画，你第一眼看上去就会觉得这是3D的，而不是一个简单的矩形！　　\n\n### 2.模型坐标系\n模型坐标系：在计算机的3D世界里，也是通过这样一种东西来实现了3D效果。如果在计算机屏幕上面绘制3D模型，那么我们首先在3D软件上制作出这个模型，这个模型会有一个原点，来建一个坐标系，无论是左手还是右手都差不多，这个坐标系，我们就叫做模型坐标系，那么这个模型的每个部位都相对于原点有一个坐标。\n<!--more-->\n### 3. 世界坐标系\n世界坐标系：既然每个模型都有一个坐标系，就相当于你自己举着手，你的手在脸的正前方，那么相对于旁边的人，你的手在哪儿。那么就会有了一个概念叫世界坐标系，在世界坐标系中，每个模型的坐标都是相对于世界坐标系原点的，那么除非重叠，否则是不可能出现坐标一样的情况。就相当于你站的位置，不会再有人站了一样。而我们的光照计算也会是在世界坐标系中进行。\n\n### 4. 摄影坐标系\n摄影坐标系：每个人都是在以自己的眼睛来看这个世界，比如你转动你的眼睛，看到的事物就会不一样。同样，在计算机的世界里，每次只能从唯一的视角出发来渲染物体，3D游戏都会提供摄像机漫游的功能，屏幕显示的内容会随着摄像机的变化而变化，这是因为GPU将物体的顶点坐标从世界坐标系转到了摄像机坐标系。所谓的摄像机坐标系，是以摄像机为原点，由视线方向，视角和远近平面，组成的一个梯形体的三维空间，叫做viewing frustum(视锥体）\n\n既然可以看见的区域已经确定，那么GPU就得做一下筛检，就像你面朝大海，即便春暖花开，你也只能看到你朝着的那面，你背后的风景你是看不到的，但那又客观存在着。这个时候，GPU就得做一下裁剪，在这个区域内的东西才会渲染，不在这个区域内的，那就只能被抛弃了，这一步叫做裁剪（clip）,怎么判断物体在不在这个区域的过程，叫做裁剪算法。\n\n至于怎么裁剪的，过程算法比较复杂，请自行参阅资料（这个过程也可以在应用程序中做）。裁剪过后，你这些东西都还是在3D空间里面的概念，而始终得显示在二维的屏幕上面，那么就得有个过程叫做屏幕映射，也就是说将3D的东西在2D的平面上显示出来就如同将这个立方体画在纸上，而你一看到一张纸上画的图，还是看出3D效果来。\n\n之后的步骤，叫做图元装配，根据顶点的位置和索引关系，组成线和面，然后将超出屏幕外的三角形进行裁剪，就像一个三角形有一个顶点在屏幕外，剪掉之后，这三角形就会变成四边形了。接下来的过程，叫做光栅化，所谓光栅化，就是给显示器的像素点赋值，屏幕是由一个一个的像素点构成，给每个点赋值上相应的颜色，连起来就是一整个屏幕了，结果之前的过程，我们可以得到每个点的屏幕坐标值，也知道我们要绘制成啥样（点，线，面）其中还有个问题，如图\n\n \n之后，我们就需要知道每个顶点的颜色了，这个颜色也在顶点信息之中，其中会牵涉到一种情况叫做混色，是根据当前的颜色跟正在计算的颜色的透明值，混合为一种颜色进行输出，也就是我们常说的Alpha值，一般叫做alpha混合技术，每个像素都关联一个RGB颜色值和一个A值，Alpha值用来描述物体的透明度.\n\n计算公式为newColor=curColor*a+(1-a)*nextColor   。混合之后，颜色被写入帧缓存中。那么如果同样一个位置的，有两个顶点，如果有两种颜色，而且都不透明，那么，到底是绘制那一种颜色呢？这里就有一个概念，叫做Z Buffer一般叫Z缓冲区，或者叫深度缓冲区，用来确定这个遮挡关系，这个值在（0,1）值越小，离近裁屏幕就更近，想象一下，在现实生活中，两块木板竖着叠在你面前，你当然只能看到近的那块。那么，GPU通过比较来判断顶点之间的遮挡关系，这个值其实也只是一个相对的大小，完全就是用来比较才有用的。　","slug":"GPU编程概述","published":1,"updated":"2016-03-22T04:25:38.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cim8yfwvn0001r8koayitst9o","content":"<h2 id=\"gpu&#x7F16;&#x7A0B;&#x6982;&#x8FF0;\"><a href=\"#GPU&#x7F16;&#x7A0B;&#x6982;&#x8FF0;\" class=\"headerlink\" title=\"#GPU&#x7F16;&#x7A0B;&#x6982;&#x8FF0;\"></a>#GPU&#x7F16;&#x7A0B;&#x6982;&#x8FF0;</h2><h3 id=\"1-2d&#x5C55;&#x793A;\"><a href=\"#1-2D&#x5C55;&#x793A;\" class=\"headerlink\" title=\"1. 2D&#x5C55;&#x793A;\"></a>1. 2D&#x5C55;&#x793A;</h3><p>&#x5982;&#x679C;&#x5728;2D&#x4E0A;&#x9762;&#xFF0C;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x770B;&#x4F5C;&#x662F;&#x4E00;&#x5F20;&#x56FE;&#x8D34;&#x5728;&#x5C4F;&#x5E55;&#x4E0A;&#x5C31;OK&#x3002;&#x5728;3D&#x4E0A;&#x9762;&#xFF0C;&#x5C31;&#x590D;&#x6742;&#x4E86;&#x4E00;&#x70B9;&#xFF0C;&#x9996;&#x5148;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x5C4F;&#x5E55;&#x4E0A;2D&#x7684;&#xFF0C;&#x4E0D;&#x50CF;&#x73B0;&#x5B9E;&#x4E16;&#x754C;&#xFF0C;&#x662F;&#x4E09;&#x7EF4;&#x7A7A;&#x95F4;&#xFF01;&#x90A3;&#x4E48;&#x600E;&#x4E48;&#x5728;&#x5C4F;&#x5E55;&#x4E0A;&#x753B;&#x4E1C;&#x897F;&#x624D;&#x80FD;&#x770B;&#x4E0A;&#x53BB;&#x6709;3D&#x6548;&#x679C;&#x5462;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#x5728;&#x7EB8;&#x4E0A;&#x753B;&#x4E00;&#x4E2A;&#x7ACB;&#x65B9;&#x4F53;&#xFF0C;&#x5B66;&#x8FC7;&#x6570;&#x5B66;&#x90FD;&#x4F1A;&#x753B;&#xFF0C;&#x4F60;&#x7B2C;&#x4E00;&#x773C;&#x770B;&#x4E0A;&#x53BB;&#x5C31;&#x4F1A;&#x89C9;&#x5F97;&#x8FD9;&#x662F;3D&#x7684;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x77E9;&#x5F62;&#xFF01;&#x3000;&#x3000;</p>\n<h3 id=\"2&#x6A21;&#x578B;&#x5750;&#x6807;&#x7CFB;\"><a href=\"#2-&#x6A21;&#x578B;&#x5750;&#x6807;&#x7CFB;\" class=\"headerlink\" title=\"2.&#x6A21;&#x578B;&#x5750;&#x6807;&#x7CFB;\"></a>2.&#x6A21;&#x578B;&#x5750;&#x6807;&#x7CFB;</h3><p>&#x6A21;&#x578B;&#x5750;&#x6807;&#x7CFB;&#xFF1A;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x7684;3D&#x4E16;&#x754C;&#x91CC;&#xFF0C;&#x4E5F;&#x662F;&#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x4E00;&#x79CD;&#x4E1C;&#x897F;&#x6765;&#x5B9E;&#x73B0;&#x4E86;3D&#x6548;&#x679C;&#x3002;&#x5982;&#x679C;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x5C4F;&#x5E55;&#x4E0A;&#x9762;&#x7ED8;&#x5236;3D&#x6A21;&#x578B;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x9996;&#x5148;&#x5728;3D&#x8F6F;&#x4EF6;&#x4E0A;&#x5236;&#x4F5C;&#x51FA;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x4F1A;&#x6709;&#x4E00;&#x4E2A;&#x539F;&#x70B9;&#xFF0C;&#x6765;&#x5EFA;&#x4E00;&#x4E2A;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x5DE6;&#x624B;&#x8FD8;&#x662F;&#x53F3;&#x624B;&#x90FD;&#x5DEE;&#x4E0D;&#x591A;&#xFF0C;&#x8FD9;&#x4E2A;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EB;&#x505A;&#x6A21;&#x578B;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x7684;&#x6BCF;&#x4E2A;&#x90E8;&#x4F4D;&#x90FD;&#x76F8;&#x5BF9;&#x4E8E;&#x539F;&#x70B9;&#x6709;&#x4E00;&#x4E2A;&#x5750;&#x6807;&#x3002;<br><a id=\"more\"></a></p>\n<h3 id=\"3-&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;\"><a href=\"#3-&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;\" class=\"headerlink\" title=\"3. &#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;\"></a>3. &#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;</h3><p>&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#xFF1A;&#x65E2;&#x7136;&#x6BCF;&#x4E2A;&#x6A21;&#x578B;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x4F60;&#x81EA;&#x5DF1;&#x4E3E;&#x7740;&#x624B;&#xFF0C;&#x4F60;&#x7684;&#x624B;&#x5728;&#x8138;&#x7684;&#x6B63;&#x524D;&#x65B9;&#xFF0C;&#x90A3;&#x4E48;&#x76F8;&#x5BF9;&#x4E8E;&#x65C1;&#x8FB9;&#x7684;&#x4EBA;&#xFF0C;&#x4F60;&#x7684;&#x624B;&#x5728;&#x54EA;&#x513F;&#x3002;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x6709;&#x4E86;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#x53EB;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x5728;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E2A;&#x6A21;&#x578B;&#x7684;&#x5750;&#x6807;&#x90FD;&#x662F;&#x76F8;&#x5BF9;&#x4E8E;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x539F;&#x70B9;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x9664;&#x975E;&#x91CD;&#x53E0;&#xFF0C;&#x5426;&#x5219;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x5750;&#x6807;&#x4E00;&#x6837;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x4F60;&#x7AD9;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E0D;&#x4F1A;&#x518D;&#x6709;&#x4EBA;&#x7AD9;&#x4E86;&#x4E00;&#x6837;&#x3002;&#x800C;&#x6211;&#x4EEC;&#x7684;&#x5149;&#x7167;&#x8BA1;&#x7B97;&#x4E5F;&#x4F1A;&#x662F;&#x5728;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x4E2D;&#x8FDB;&#x884C;&#x3002;</p>\n<h3 id=\"4-&#x6444;&#x5F71;&#x5750;&#x6807;&#x7CFB;\"><a href=\"#4-&#x6444;&#x5F71;&#x5750;&#x6807;&#x7CFB;\" class=\"headerlink\" title=\"4. &#x6444;&#x5F71;&#x5750;&#x6807;&#x7CFB;\"></a>4. &#x6444;&#x5F71;&#x5750;&#x6807;&#x7CFB;</h3><p>&#x6444;&#x5F71;&#x5750;&#x6807;&#x7CFB;&#xFF1A;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x662F;&#x5728;&#x4EE5;&#x81EA;&#x5DF1;&#x7684;&#x773C;&#x775B;&#x6765;&#x770B;&#x8FD9;&#x4E2A;&#x4E16;&#x754C;&#xFF0C;&#x6BD4;&#x5982;&#x4F60;&#x8F6C;&#x52A8;&#x4F60;&#x7684;&#x773C;&#x775B;&#xFF0C;&#x770B;&#x5230;&#x7684;&#x4E8B;&#x7269;&#x5C31;&#x4F1A;&#x4E0D;&#x4E00;&#x6837;&#x3002;&#x540C;&#x6837;&#xFF0C;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x4E16;&#x754C;&#x91CC;&#xFF0C;&#x6BCF;&#x6B21;&#x53EA;&#x80FD;&#x4ECE;&#x552F;&#x4E00;&#x7684;&#x89C6;&#x89D2;&#x51FA;&#x53D1;&#x6765;&#x6E32;&#x67D3;&#x7269;&#x4F53;&#xFF0C;3D&#x6E38;&#x620F;&#x90FD;&#x4F1A;&#x63D0;&#x4F9B;&#x6444;&#x50CF;&#x673A;&#x6F2B;&#x6E38;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x5C4F;&#x5E55;&#x663E;&#x793A;&#x7684;&#x5185;&#x5BB9;&#x4F1A;&#x968F;&#x7740;&#x6444;&#x50CF;&#x673A;&#x7684;&#x53D8;&#x5316;&#x800C;&#x53D8;&#x5316;&#xFF0C;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;GPU&#x5C06;&#x7269;&#x4F53;&#x7684;&#x9876;&#x70B9;&#x5750;&#x6807;&#x4ECE;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x8F6C;&#x5230;&#x4E86;&#x6444;&#x50CF;&#x673A;&#x5750;&#x6807;&#x7CFB;&#x3002;&#x6240;&#x8C13;&#x7684;&#x6444;&#x50CF;&#x673A;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x662F;&#x4EE5;&#x6444;&#x50CF;&#x673A;&#x4E3A;&#x539F;&#x70B9;&#xFF0C;&#x7531;&#x89C6;&#x7EBF;&#x65B9;&#x5411;&#xFF0C;&#x89C6;&#x89D2;&#x548C;&#x8FDC;&#x8FD1;&#x5E73;&#x9762;&#xFF0C;&#x7EC4;&#x6210;&#x7684;&#x4E00;&#x4E2A;&#x68AF;&#x5F62;&#x4F53;&#x7684;&#x4E09;&#x7EF4;&#x7A7A;&#x95F4;&#xFF0C;&#x53EB;&#x505A;viewing frustum(&#x89C6;&#x9525;&#x4F53;&#xFF09;</p>\n<p>&#x65E2;&#x7136;&#x53EF;&#x4EE5;&#x770B;&#x89C1;&#x7684;&#x533A;&#x57DF;&#x5DF2;&#x7ECF;&#x786E;&#x5B9A;&#xFF0C;&#x90A3;&#x4E48;GPU&#x5C31;&#x5F97;&#x505A;&#x4E00;&#x4E0B;&#x7B5B;&#x68C0;&#xFF0C;&#x5C31;&#x50CF;&#x4F60;&#x9762;&#x671D;&#x5927;&#x6D77;&#xFF0C;&#x5373;&#x4FBF;&#x6625;&#x6696;&#x82B1;&#x5F00;&#xFF0C;&#x4F60;&#x4E5F;&#x53EA;&#x80FD;&#x770B;&#x5230;&#x4F60;&#x671D;&#x7740;&#x7684;&#x90A3;&#x9762;&#xFF0C;&#x4F60;&#x80CC;&#x540E;&#x7684;&#x98CE;&#x666F;&#x4F60;&#x662F;&#x770B;&#x4E0D;&#x5230;&#x7684;&#xFF0C;&#x4F46;&#x90A3;&#x53C8;&#x5BA2;&#x89C2;&#x5B58;&#x5728;&#x7740;&#x3002;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;GPU&#x5C31;&#x5F97;&#x505A;&#x4E00;&#x4E0B;&#x88C1;&#x526A;&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x533A;&#x57DF;&#x5185;&#x7684;&#x4E1C;&#x897F;&#x624D;&#x4F1A;&#x6E32;&#x67D3;&#xFF0C;&#x4E0D;&#x5728;&#x8FD9;&#x4E2A;&#x533A;&#x57DF;&#x5185;&#x7684;&#xFF0C;&#x90A3;&#x5C31;&#x53EA;&#x80FD;&#x88AB;&#x629B;&#x5F03;&#x4E86;&#xFF0C;&#x8FD9;&#x4E00;&#x6B65;&#x53EB;&#x505A;&#x88C1;&#x526A;&#xFF08;clip&#xFF09;,&#x600E;&#x4E48;&#x5224;&#x65AD;&#x7269;&#x4F53;&#x5728;&#x4E0D;&#x5728;&#x8FD9;&#x4E2A;&#x533A;&#x57DF;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x53EB;&#x505A;&#x88C1;&#x526A;&#x7B97;&#x6CD5;&#x3002;</p>\n<p>&#x81F3;&#x4E8E;&#x600E;&#x4E48;&#x88C1;&#x526A;&#x7684;&#xFF0C;&#x8FC7;&#x7A0B;&#x7B97;&#x6CD5;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#xFF0C;&#x8BF7;&#x81EA;&#x884C;&#x53C2;&#x9605;&#x8D44;&#x6599;&#xFF08;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x4E2D;&#x505A;&#xFF09;&#x3002;&#x88C1;&#x526A;&#x8FC7;&#x540E;&#xFF0C;&#x4F60;&#x8FD9;&#x4E9B;&#x4E1C;&#x897F;&#x90FD;&#x8FD8;&#x662F;&#x5728;3D&#x7A7A;&#x95F4;&#x91CC;&#x9762;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x800C;&#x59CB;&#x7EC8;&#x5F97;&#x663E;&#x793A;&#x5728;&#x4E8C;&#x7EF4;&#x7684;&#x5C4F;&#x5E55;&#x4E0A;&#x9762;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x5F97;&#x6709;&#x4E2A;&#x8FC7;&#x7A0B;&#x53EB;&#x505A;&#x5C4F;&#x5E55;&#x6620;&#x5C04;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5C06;3D&#x7684;&#x4E1C;&#x897F;&#x5728;2D&#x7684;&#x5E73;&#x9762;&#x4E0A;&#x663E;&#x793A;&#x51FA;&#x6765;&#x5C31;&#x5982;&#x540C;&#x5C06;&#x8FD9;&#x4E2A;&#x7ACB;&#x65B9;&#x4F53;&#x753B;&#x5728;&#x7EB8;&#x4E0A;&#xFF0C;&#x800C;&#x4F60;&#x4E00;&#x770B;&#x5230;&#x4E00;&#x5F20;&#x7EB8;&#x4E0A;&#x753B;&#x7684;&#x56FE;&#xFF0C;&#x8FD8;&#x662F;&#x770B;&#x51FA;3D&#x6548;&#x679C;&#x6765;&#x3002;</p>\n<p>&#x4E4B;&#x540E;&#x7684;&#x6B65;&#x9AA4;&#xFF0C;&#x53EB;&#x505A;&#x56FE;&#x5143;&#x88C5;&#x914D;&#xFF0C;&#x6839;&#x636E;&#x9876;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x7D22;&#x5F15;&#x5173;&#x7CFB;&#xFF0C;&#x7EC4;&#x6210;&#x7EBF;&#x548C;&#x9762;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x8D85;&#x51FA;&#x5C4F;&#x5E55;&#x5916;&#x7684;&#x4E09;&#x89D2;&#x5F62;&#x8FDB;&#x884C;&#x88C1;&#x526A;&#xFF0C;&#x5C31;&#x50CF;&#x4E00;&#x4E2A;&#x4E09;&#x89D2;&#x5F62;&#x6709;&#x4E00;&#x4E2A;&#x9876;&#x70B9;&#x5728;&#x5C4F;&#x5E55;&#x5916;&#xFF0C;&#x526A;&#x6389;&#x4E4B;&#x540E;&#xFF0C;&#x8FD9;&#x4E09;&#x89D2;&#x5F62;&#x5C31;&#x4F1A;&#x53D8;&#x6210;&#x56DB;&#x8FB9;&#x5F62;&#x4E86;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x53EB;&#x505A;&#x5149;&#x6805;&#x5316;&#xFF0C;&#x6240;&#x8C13;&#x5149;&#x6805;&#x5316;&#xFF0C;&#x5C31;&#x662F;&#x7ED9;&#x663E;&#x793A;&#x5668;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x8D4B;&#x503C;&#xFF0C;&#x5C4F;&#x5E55;&#x662F;&#x7531;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x6784;&#x6210;&#xFF0C;&#x7ED9;&#x6BCF;&#x4E2A;&#x70B9;&#x8D4B;&#x503C;&#x4E0A;&#x76F8;&#x5E94;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x8FDE;&#x8D77;&#x6765;&#x5C31;&#x662F;&#x4E00;&#x6574;&#x4E2A;&#x5C4F;&#x5E55;&#x4E86;&#xFF0C;&#x7ED3;&#x679C;&#x4E4B;&#x524D;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x5C4F;&#x5E55;&#x5750;&#x6807;&#x503C;&#xFF0C;&#x4E5F;&#x77E5;&#x9053;&#x6211;&#x4EEC;&#x8981;&#x7ED8;&#x5236;&#x6210;&#x5565;&#x6837;&#xFF08;&#x70B9;&#xFF0C;&#x7EBF;&#xFF0C;&#x9762;&#xFF09;&#x5176;&#x4E2D;&#x8FD8;&#x6709;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x56FE;</p>\n<p>&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x9700;&#x8981;&#x77E5;&#x9053;&#x6BCF;&#x4E2A;&#x9876;&#x70B9;&#x7684;&#x989C;&#x8272;&#x4E86;&#xFF0C;&#x8FD9;&#x4E2A;&#x989C;&#x8272;&#x4E5F;&#x5728;&#x9876;&#x70B9;&#x4FE1;&#x606F;&#x4E4B;&#x4E2D;&#xFF0C;&#x5176;&#x4E2D;&#x4F1A;&#x7275;&#x6D89;&#x5230;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#x53EB;&#x505A;&#x6DF7;&#x8272;&#xFF0C;&#x662F;&#x6839;&#x636E;&#x5F53;&#x524D;&#x7684;&#x989C;&#x8272;&#x8DDF;&#x6B63;&#x5728;&#x8BA1;&#x7B97;&#x7684;&#x989C;&#x8272;&#x7684;&#x900F;&#x660E;&#x503C;&#xFF0C;&#x6DF7;&#x5408;&#x4E3A;&#x4E00;&#x79CD;&#x989C;&#x8272;&#x8FDB;&#x884C;&#x8F93;&#x51FA;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x5E38;&#x8BF4;&#x7684;Alpha&#x503C;&#xFF0C;&#x4E00;&#x822C;&#x53EB;&#x505A;alpha&#x6DF7;&#x5408;&#x6280;&#x672F;&#xFF0C;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x90FD;&#x5173;&#x8054;&#x4E00;&#x4E2A;RGB&#x989C;&#x8272;&#x503C;&#x548C;&#x4E00;&#x4E2A;A&#x503C;&#xFF0C;Alpha&#x503C;&#x7528;&#x6765;&#x63CF;&#x8FF0;&#x7269;&#x4F53;&#x7684;&#x900F;&#x660E;&#x5EA6;.</p>\n<p>&#x8BA1;&#x7B97;&#x516C;&#x5F0F;&#x4E3A;newColor=curColor<em>a+(1-a)</em>nextColor   &#x3002;&#x6DF7;&#x5408;&#x4E4B;&#x540E;&#xFF0C;&#x989C;&#x8272;&#x88AB;&#x5199;&#x5165;&#x5E27;&#x7F13;&#x5B58;&#x4E2D;&#x3002;&#x90A3;&#x4E48;&#x5982;&#x679C;&#x540C;&#x6837;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x7684;&#xFF0C;&#x6709;&#x4E24;&#x4E2A;&#x9876;&#x70B9;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E24;&#x79CD;&#x989C;&#x8272;&#xFF0C;&#x800C;&#x4E14;&#x90FD;&#x4E0D;&#x900F;&#x660E;&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;&#x5230;&#x5E95;&#x662F;&#x7ED8;&#x5236;&#x90A3;&#x4E00;&#x79CD;&#x989C;&#x8272;&#x5462;&#xFF1F;&#x8FD9;&#x91CC;&#x5C31;&#x6709;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF0C;&#x53EB;&#x505A;Z Buffer&#x4E00;&#x822C;&#x53EB;Z&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x6216;&#x8005;&#x53EB;&#x6DF1;&#x5EA6;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x7528;&#x6765;&#x786E;&#x5B9A;&#x8FD9;&#x4E2A;&#x906E;&#x6321;&#x5173;&#x7CFB;&#xFF0C;&#x8FD9;&#x4E2A;&#x503C;&#x5728;&#xFF08;0,1&#xFF09;&#x503C;&#x8D8A;&#x5C0F;&#xFF0C;&#x79BB;&#x8FD1;&#x88C1;&#x5C4F;&#x5E55;&#x5C31;&#x66F4;&#x8FD1;&#xFF0C;&#x60F3;&#x8C61;&#x4E00;&#x4E0B;&#xFF0C;&#x5728;&#x73B0;&#x5B9E;&#x751F;&#x6D3B;&#x4E2D;&#xFF0C;&#x4E24;&#x5757;&#x6728;&#x677F;&#x7AD6;&#x7740;&#x53E0;&#x5728;&#x4F60;&#x9762;&#x524D;&#xFF0C;&#x4F60;&#x5F53;&#x7136;&#x53EA;&#x80FD;&#x770B;&#x5230;&#x8FD1;&#x7684;&#x90A3;&#x5757;&#x3002;&#x90A3;&#x4E48;&#xFF0C;GPU&#x901A;&#x8FC7;&#x6BD4;&#x8F83;&#x6765;&#x5224;&#x65AD;&#x9876;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x906E;&#x6321;&#x5173;&#x7CFB;&#xFF0C;&#x8FD9;&#x4E2A;&#x503C;&#x5176;&#x5B9E;&#x4E5F;&#x53EA;&#x662F;&#x4E00;&#x4E2A;&#x76F8;&#x5BF9;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x5B8C;&#x5168;&#x5C31;&#x662F;&#x7528;&#x6765;&#x6BD4;&#x8F83;&#x624D;&#x6709;&#x7528;&#x7684;&#x3002;</p>\n","excerpt":"<h2 id=\"GPU编程概述\"><a href=\"#GPU编程概述\" class=\"headerlink\" title=\"#GPU编程概述\"></a>#GPU编程概述</h2><h3 id=\"1-2D展示\"><a href=\"#1-2D展示\" class=\"headerlink\" title=\"1. 2D展示\"></a>1. 2D展示</h3><p>如果在2D上面，很简单，完全可以看作是一张图贴在屏幕上就OK。在3D上面，就复杂了一点，首先，我们的屏幕上2D的，不像现实世界，是三维空间！那么怎么在屏幕上画东西才能看上去有3D效果呢，你可以试试在纸上画一个立方体，学过数学都会画，你第一眼看上去就会觉得这是3D的，而不是一个简单的矩形！　　</p>\n<h3 id=\"2-模型坐标系\"><a href=\"#2-模型坐标系\" class=\"headerlink\" title=\"2.模型坐标系\"></a>2.模型坐标系</h3><p>模型坐标系：在计算机的3D世界里，也是通过这样一种东西来实现了3D效果。如果在计算机屏幕上面绘制3D模型，那么我们首先在3D软件上制作出这个模型，这个模型会有一个原点，来建一个坐标系，无论是左手还是右手都差不多，这个坐标系，我们就叫做模型坐标系，那么这个模型的每个部位都相对于原点有一个坐标。<br>","more":"</p>\n<h3 id=\"3-世界坐标系\"><a href=\"#3-世界坐标系\" class=\"headerlink\" title=\"3. 世界坐标系\"></a>3. 世界坐标系</h3><p>世界坐标系：既然每个模型都有一个坐标系，就相当于你自己举着手，你的手在脸的正前方，那么相对于旁边的人，你的手在哪儿。那么就会有了一个概念叫世界坐标系，在世界坐标系中，每个模型的坐标都是相对于世界坐标系原点的，那么除非重叠，否则是不可能出现坐标一样的情况。就相当于你站的位置，不会再有人站了一样。而我们的光照计算也会是在世界坐标系中进行。</p>\n<h3 id=\"4-摄影坐标系\"><a href=\"#4-摄影坐标系\" class=\"headerlink\" title=\"4. 摄影坐标系\"></a>4. 摄影坐标系</h3><p>摄影坐标系：每个人都是在以自己的眼睛来看这个世界，比如你转动你的眼睛，看到的事物就会不一样。同样，在计算机的世界里，每次只能从唯一的视角出发来渲染物体，3D游戏都会提供摄像机漫游的功能，屏幕显示的内容会随着摄像机的变化而变化，这是因为GPU将物体的顶点坐标从世界坐标系转到了摄像机坐标系。所谓的摄像机坐标系，是以摄像机为原点，由视线方向，视角和远近平面，组成的一个梯形体的三维空间，叫做viewing frustum(视锥体）</p>\n<p>既然可以看见的区域已经确定，那么GPU就得做一下筛检，就像你面朝大海，即便春暖花开，你也只能看到你朝着的那面，你背后的风景你是看不到的，但那又客观存在着。这个时候，GPU就得做一下裁剪，在这个区域内的东西才会渲染，不在这个区域内的，那就只能被抛弃了，这一步叫做裁剪（clip）,怎么判断物体在不在这个区域的过程，叫做裁剪算法。</p>\n<p>至于怎么裁剪的，过程算法比较复杂，请自行参阅资料（这个过程也可以在应用程序中做）。裁剪过后，你这些东西都还是在3D空间里面的概念，而始终得显示在二维的屏幕上面，那么就得有个过程叫做屏幕映射，也就是说将3D的东西在2D的平面上显示出来就如同将这个立方体画在纸上，而你一看到一张纸上画的图，还是看出3D效果来。</p>\n<p>之后的步骤，叫做图元装配，根据顶点的位置和索引关系，组成线和面，然后将超出屏幕外的三角形进行裁剪，就像一个三角形有一个顶点在屏幕外，剪掉之后，这三角形就会变成四边形了。接下来的过程，叫做光栅化，所谓光栅化，就是给显示器的像素点赋值，屏幕是由一个一个的像素点构成，给每个点赋值上相应的颜色，连起来就是一整个屏幕了，结果之前的过程，我们可以得到每个点的屏幕坐标值，也知道我们要绘制成啥样（点，线，面）其中还有个问题，如图</p>\n<p>之后，我们就需要知道每个顶点的颜色了，这个颜色也在顶点信息之中，其中会牵涉到一种情况叫做混色，是根据当前的颜色跟正在计算的颜色的透明值，混合为一种颜色进行输出，也就是我们常说的Alpha值，一般叫做alpha混合技术，每个像素都关联一个RGB颜色值和一个A值，Alpha值用来描述物体的透明度.</p>\n<p>计算公式为newColor=curColor<em>a+(1-a)</em>nextColor   。混合之后，颜色被写入帧缓存中。那么如果同样一个位置的，有两个顶点，如果有两种颜色，而且都不透明，那么，到底是绘制那一种颜色呢？这里就有一个概念，叫做Z Buffer一般叫Z缓冲区，或者叫深度缓冲区，用来确定这个遮挡关系，这个值在（0,1）值越小，离近裁屏幕就更近，想象一下，在现实生活中，两块木板竖着叠在你面前，你当然只能看到近的那块。那么，GPU通过比较来判断顶点之间的遮挡关系，这个值其实也只是一个相对的大小，完全就是用来比较才有用的。</p>"},{"title":"Lua and Unilua","date":"2016-03-21T11:20:22.000Z","_content":"###LUA学习记录：\n\nC API是一个C代码与Lua进行交互的函数集。他有以下部分组成：读写Lua全局变量的函数，调用Lua函数的函数，运行Lua代码片断的函数，注册C函数然后可以在Lua中被调用的函数，等等。\n\n在C和Lua之间通信关键内容在于一个虚拟的栈。几乎所有的API调用都是对栈上的值进行操作，所有C与Lua之间的数据交换也都通过这个栈来完成。另外，你也可以使用栈来保存临时变量。\n\nLua库没有定义任何全局变量。它所有的状态保存在动态结构lua_State中，而且指向这个结构的指针作为所有Lua函数的一个参数。\n<!--more-->\n###运行步骤：\n\n创建一个state并将标准库载入之后，就可以着手解释用户的输入了。对于用户输入的每一行，C程序首先调用luaL_loadbuffer编译这些Lua代码。如果没有错误，这个调用返回零并把编译之后的chunk压入栈。（记住，我们将在下一节中讨论魔法般的栈）之后，C程序调用lua_pcall，它将会把chunk从栈中弹出并在保护模式下运行它。和luaL_laodbuffer一样，lua_pcall在没有错误的情况下返回零。在有错误的情况下，这两个函数都将一条错误消息压入栈；我们可以用lua_tostring来得到这条信息、输出它，用lua_pop将它从栈中删除。\n\n###堆栈：关于栈的操作请参见Programing in Lua一书中的186页的一个函数\n压入元素，API有一系列压栈的函数，他将每种可以用C来描述的Lua类型压栈（pushnil,pushnumber,pushboolean,pushstring）等等，第一参数都是luaState!\n使用checkStack来检测栈是否有足够的空间！\n有检测元素类型的函数，比如 isnumber之类的！\n\n###查询元素，tonumber,tostring之类的\n\n堆栈的操作，gettop返回堆栈元素个数，也是栈顶元素的索引！settop设置栈顶（堆栈中元素个数）为一个指定的值！如果开始的栈顶高于指定的栈顶，顶部的值将会被丢弃！settop(L,0)清空堆栈！\n使用负数会设置堆栈顶到指定的索引！\npushvalue压入堆栈上指定索引的一个拷贝到栈顶！insert移动栈顶的元素到指定索引的位置，并将这个索引位置上面的元素全部上移至栈顶被移动后留下的空隔！\nreplace从栈顶弹出元素将其设置到指定索引位置，没有任何移动操作\n\nLUA中使用更多的使用对栈的操作来实现数据的交互！提供了一些对栈操作的API标准，在UniLua中，依照标准实现了这些函数，名字都只是小改动了一些，毕竟C#跟C语法规则还是不同！在对堆栈的操作中，是用索引来进行定位的，正数索引自底向上取值，负数索引自顶向下取值（以正负1开始）！在其中settop函数中使用了索引0用来清空堆栈\n------\n###扩展你的程序\n做为配置语言是LUA的一个重要内容！\n\n打开包并加载函数库，加载文件中的信息块 （参见188页 ）\n\n引入table的概念\n如 ；在Lua文件中进行这样的定义：BLUE={r=0,g=0,b=1} background=BLUE 在C程序里面引用getglobal(L,background); red=getfield(\"r\") green=getfield(\"g\")......\ngetfield函数在标准的LUA库里面没有提供，需要自己实现，在LuaAPI中提供了gettable函数，他接受table在栈中的位置为参数，将对应key值出栈，返回与key对应的value！\n也就是说，可以使用这个方式，将对栈的操作进行封装，封装一个getfield函数来方便我们对table中值的取的。\n\n\n###The Registry\nregistry 一直位于一个由LUA_REGISTRYINDEX定义的值所对应的假索引(pseudo-index)的位置。一个假索引除了他对应的值不在栈中之外，其他都类似于栈中的索引。\nregistry就是普通的Lua表，因此，你可以使用任何非nil的Lua值来访问她的元素。然而，由于所有的C库共享相同的registry ，你必须注意使用什么样的值作为key，否则会导致命名冲突。\n\nregistry实现了全局的值，upvalue机制实现了与C static等价的东西","source":"_posts/Lua-and-Unilua.md","raw":"---\ntitle: Lua and Unilua\ndate: 2016-03-21 19:20:22\ntags:\n---\n###LUA学习记录：\n\nC API是一个C代码与Lua进行交互的函数集。他有以下部分组成：读写Lua全局变量的函数，调用Lua函数的函数，运行Lua代码片断的函数，注册C函数然后可以在Lua中被调用的函数，等等。\n\n在C和Lua之间通信关键内容在于一个虚拟的栈。几乎所有的API调用都是对栈上的值进行操作，所有C与Lua之间的数据交换也都通过这个栈来完成。另外，你也可以使用栈来保存临时变量。\n\nLua库没有定义任何全局变量。它所有的状态保存在动态结构lua_State中，而且指向这个结构的指针作为所有Lua函数的一个参数。\n<!--more-->\n###运行步骤：\n\n创建一个state并将标准库载入之后，就可以着手解释用户的输入了。对于用户输入的每一行，C程序首先调用luaL_loadbuffer编译这些Lua代码。如果没有错误，这个调用返回零并把编译之后的chunk压入栈。（记住，我们将在下一节中讨论魔法般的栈）之后，C程序调用lua_pcall，它将会把chunk从栈中弹出并在保护模式下运行它。和luaL_laodbuffer一样，lua_pcall在没有错误的情况下返回零。在有错误的情况下，这两个函数都将一条错误消息压入栈；我们可以用lua_tostring来得到这条信息、输出它，用lua_pop将它从栈中删除。\n\n###堆栈：关于栈的操作请参见Programing in Lua一书中的186页的一个函数\n压入元素，API有一系列压栈的函数，他将每种可以用C来描述的Lua类型压栈（pushnil,pushnumber,pushboolean,pushstring）等等，第一参数都是luaState!\n使用checkStack来检测栈是否有足够的空间！\n有检测元素类型的函数，比如 isnumber之类的！\n\n###查询元素，tonumber,tostring之类的\n\n堆栈的操作，gettop返回堆栈元素个数，也是栈顶元素的索引！settop设置栈顶（堆栈中元素个数）为一个指定的值！如果开始的栈顶高于指定的栈顶，顶部的值将会被丢弃！settop(L,0)清空堆栈！\n使用负数会设置堆栈顶到指定的索引！\npushvalue压入堆栈上指定索引的一个拷贝到栈顶！insert移动栈顶的元素到指定索引的位置，并将这个索引位置上面的元素全部上移至栈顶被移动后留下的空隔！\nreplace从栈顶弹出元素将其设置到指定索引位置，没有任何移动操作\n\nLUA中使用更多的使用对栈的操作来实现数据的交互！提供了一些对栈操作的API标准，在UniLua中，依照标准实现了这些函数，名字都只是小改动了一些，毕竟C#跟C语法规则还是不同！在对堆栈的操作中，是用索引来进行定位的，正数索引自底向上取值，负数索引自顶向下取值（以正负1开始）！在其中settop函数中使用了索引0用来清空堆栈\n------\n###扩展你的程序\n做为配置语言是LUA的一个重要内容！\n\n打开包并加载函数库，加载文件中的信息块 （参见188页 ）\n\n引入table的概念\n如 ；在Lua文件中进行这样的定义：BLUE={r=0,g=0,b=1} background=BLUE 在C程序里面引用getglobal(L,background); red=getfield(\"r\") green=getfield(\"g\")......\ngetfield函数在标准的LUA库里面没有提供，需要自己实现，在LuaAPI中提供了gettable函数，他接受table在栈中的位置为参数，将对应key值出栈，返回与key对应的value！\n也就是说，可以使用这个方式，将对栈的操作进行封装，封装一个getfield函数来方便我们对table中值的取的。\n\n\n###The Registry\nregistry 一直位于一个由LUA_REGISTRYINDEX定义的值所对应的假索引(pseudo-index)的位置。一个假索引除了他对应的值不在栈中之外，其他都类似于栈中的索引。\nregistry就是普通的Lua表，因此，你可以使用任何非nil的Lua值来访问她的元素。然而，由于所有的C库共享相同的registry ，你必须注意使用什么样的值作为key，否则会导致命名冲突。\n\nregistry实现了全局的值，upvalue机制实现了与C static等价的东西","slug":"Lua-and-Unilua","published":1,"updated":"2016-03-22T04:25:34.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cim8yfwvs0002r8kogsieyqpq","content":"<p>###LUA&#x5B66;&#x4E60;&#x8BB0;&#x5F55;&#xFF1A;</p>\n<p>C API&#x662F;&#x4E00;&#x4E2A;C&#x4EE3;&#x7801;&#x4E0E;Lua&#x8FDB;&#x884C;&#x4EA4;&#x4E92;&#x7684;&#x51FD;&#x6570;&#x96C6;&#x3002;&#x4ED6;&#x6709;&#x4EE5;&#x4E0B;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#xFF1A;&#x8BFB;&#x5199;Lua&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x8C03;&#x7528;Lua&#x51FD;&#x6570;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x8FD0;&#x884C;Lua&#x4EE3;&#x7801;&#x7247;&#x65AD;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x6CE8;&#x518C;C&#x51FD;&#x6570;&#x7136;&#x540E;&#x53EF;&#x4EE5;&#x5728;Lua&#x4E2D;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x7B49;&#x7B49;&#x3002;</p>\n<p>&#x5728;C&#x548C;Lua&#x4E4B;&#x95F4;&#x901A;&#x4FE1;&#x5173;&#x952E;&#x5185;&#x5BB9;&#x5728;&#x4E8E;&#x4E00;&#x4E2A;&#x865A;&#x62DF;&#x7684;&#x6808;&#x3002;&#x51E0;&#x4E4E;&#x6240;&#x6709;&#x7684;API&#x8C03;&#x7528;&#x90FD;&#x662F;&#x5BF9;&#x6808;&#x4E0A;&#x7684;&#x503C;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x6240;&#x6709;C&#x4E0E;Lua&#x4E4B;&#x95F4;&#x7684;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x4E5F;&#x90FD;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x6808;&#x6765;&#x5B8C;&#x6210;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6808;&#x6765;&#x4FDD;&#x5B58;&#x4E34;&#x65F6;&#x53D8;&#x91CF;&#x3002;</p>\n<p>Lua&#x5E93;&#x6CA1;&#x6709;&#x5B9A;&#x4E49;&#x4EFB;&#x4F55;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x3002;&#x5B83;&#x6240;&#x6709;&#x7684;&#x72B6;&#x6001;&#x4FDD;&#x5B58;&#x5728;&#x52A8;&#x6001;&#x7ED3;&#x6784;lua_State&#x4E2D;&#xFF0C;&#x800C;&#x4E14;&#x6307;&#x5411;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x7684;&#x6307;&#x9488;&#x4F5C;&#x4E3A;&#x6240;&#x6709;Lua&#x51FD;&#x6570;&#x7684;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x3002;<br><a id=\"more\"></a></p>\n<p>###&#x8FD0;&#x884C;&#x6B65;&#x9AA4;&#xFF1A;</p>\n<p>&#x521B;&#x5EFA;&#x4E00;&#x4E2A;state&#x5E76;&#x5C06;&#x6807;&#x51C6;&#x5E93;&#x8F7D;&#x5165;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x7740;&#x624B;&#x89E3;&#x91CA;&#x7528;&#x6237;&#x7684;&#x8F93;&#x5165;&#x4E86;&#x3002;&#x5BF9;&#x4E8E;&#x7528;&#x6237;&#x8F93;&#x5165;&#x7684;&#x6BCF;&#x4E00;&#x884C;&#xFF0C;C&#x7A0B;&#x5E8F;&#x9996;&#x5148;&#x8C03;&#x7528;luaL_loadbuffer&#x7F16;&#x8BD1;&#x8FD9;&#x4E9B;Lua&#x4EE3;&#x7801;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x9519;&#x8BEF;&#xFF0C;&#x8FD9;&#x4E2A;&#x8C03;&#x7528;&#x8FD4;&#x56DE;&#x96F6;&#x5E76;&#x628A;&#x7F16;&#x8BD1;&#x4E4B;&#x540E;&#x7684;chunk&#x538B;&#x5165;&#x6808;&#x3002;&#xFF08;&#x8BB0;&#x4F4F;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x5728;&#x4E0B;&#x4E00;&#x8282;&#x4E2D;&#x8BA8;&#x8BBA;&#x9B54;&#x6CD5;&#x822C;&#x7684;&#x6808;&#xFF09;&#x4E4B;&#x540E;&#xFF0C;C&#x7A0B;&#x5E8F;&#x8C03;&#x7528;lua_pcall&#xFF0C;&#x5B83;&#x5C06;&#x4F1A;&#x628A;chunk&#x4ECE;&#x6808;&#x4E2D;&#x5F39;&#x51FA;&#x5E76;&#x5728;&#x4FDD;&#x62A4;&#x6A21;&#x5F0F;&#x4E0B;&#x8FD0;&#x884C;&#x5B83;&#x3002;&#x548C;luaL_laodbuffer&#x4E00;&#x6837;&#xFF0C;lua_pcall&#x5728;&#x6CA1;&#x6709;&#x9519;&#x8BEF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x8FD4;&#x56DE;&#x96F6;&#x3002;&#x5728;&#x6709;&#x9519;&#x8BEF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x51FD;&#x6570;&#x90FD;&#x5C06;&#x4E00;&#x6761;&#x9519;&#x8BEF;&#x6D88;&#x606F;&#x538B;&#x5165;&#x6808;&#xFF1B;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;lua_tostring&#x6765;&#x5F97;&#x5230;&#x8FD9;&#x6761;&#x4FE1;&#x606F;&#x3001;&#x8F93;&#x51FA;&#x5B83;&#xFF0C;&#x7528;lua_pop&#x5C06;&#x5B83;&#x4ECE;&#x6808;&#x4E2D;&#x5220;&#x9664;&#x3002;</p>\n<p>###&#x5806;&#x6808;&#xFF1A;&#x5173;&#x4E8E;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x8BF7;&#x53C2;&#x89C1;Programing in Lua&#x4E00;&#x4E66;&#x4E2D;&#x7684;186&#x9875;&#x7684;&#x4E00;&#x4E2A;&#x51FD;&#x6570;<br>&#x538B;&#x5165;&#x5143;&#x7D20;&#xFF0C;API&#x6709;&#x4E00;&#x7CFB;&#x5217;&#x538B;&#x6808;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4ED6;&#x5C06;&#x6BCF;&#x79CD;&#x53EF;&#x4EE5;&#x7528;C&#x6765;&#x63CF;&#x8FF0;&#x7684;Lua&#x7C7B;&#x578B;&#x538B;&#x6808;&#xFF08;pushnil,pushnumber,pushboolean,pushstring&#xFF09;&#x7B49;&#x7B49;&#xFF0C;&#x7B2C;&#x4E00;&#x53C2;&#x6570;&#x90FD;&#x662F;luaState!<br>&#x4F7F;&#x7528;checkStack&#x6765;&#x68C0;&#x6D4B;&#x6808;&#x662F;&#x5426;&#x6709;&#x8DB3;&#x591F;&#x7684;&#x7A7A;&#x95F4;&#xFF01;<br>&#x6709;&#x68C0;&#x6D4B;&#x5143;&#x7D20;&#x7C7B;&#x578B;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x6BD4;&#x5982; isnumber&#x4E4B;&#x7C7B;&#x7684;&#xFF01;</p>\n<p>###&#x67E5;&#x8BE2;&#x5143;&#x7D20;&#xFF0C;tonumber,tostring&#x4E4B;&#x7C7B;&#x7684;</p>\n<p>&#x5806;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;gettop&#x8FD4;&#x56DE;&#x5806;&#x6808;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#xFF0C;&#x4E5F;&#x662F;&#x6808;&#x9876;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#xFF01;settop&#x8BBE;&#x7F6E;&#x6808;&#x9876;&#xFF08;&#x5806;&#x6808;&#x4E2D;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#xFF09;&#x4E3A;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7684;&#x503C;&#xFF01;&#x5982;&#x679C;&#x5F00;&#x59CB;&#x7684;&#x6808;&#x9876;&#x9AD8;&#x4E8E;&#x6307;&#x5B9A;&#x7684;&#x6808;&#x9876;&#xFF0C;&#x9876;&#x90E8;&#x7684;&#x503C;&#x5C06;&#x4F1A;&#x88AB;&#x4E22;&#x5F03;&#xFF01;settop(L,0)&#x6E05;&#x7A7A;&#x5806;&#x6808;&#xFF01;<br>&#x4F7F;&#x7528;&#x8D1F;&#x6570;&#x4F1A;&#x8BBE;&#x7F6E;&#x5806;&#x6808;&#x9876;&#x5230;&#x6307;&#x5B9A;&#x7684;&#x7D22;&#x5F15;&#xFF01;<br>pushvalue&#x538B;&#x5165;&#x5806;&#x6808;&#x4E0A;&#x6307;&#x5B9A;&#x7D22;&#x5F15;&#x7684;&#x4E00;&#x4E2A;&#x62F7;&#x8D1D;&#x5230;&#x6808;&#x9876;&#xFF01;insert&#x79FB;&#x52A8;&#x6808;&#x9876;&#x7684;&#x5143;&#x7D20;&#x5230;&#x6307;&#x5B9A;&#x7D22;&#x5F15;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5E76;&#x5C06;&#x8FD9;&#x4E2A;&#x7D22;&#x5F15;&#x4F4D;&#x7F6E;&#x4E0A;&#x9762;&#x7684;&#x5143;&#x7D20;&#x5168;&#x90E8;&#x4E0A;&#x79FB;&#x81F3;&#x6808;&#x9876;&#x88AB;&#x79FB;&#x52A8;&#x540E;&#x7559;&#x4E0B;&#x7684;&#x7A7A;&#x9694;&#xFF01;<br>replace&#x4ECE;&#x6808;&#x9876;&#x5F39;&#x51FA;&#x5143;&#x7D20;&#x5C06;&#x5176;&#x8BBE;&#x7F6E;&#x5230;&#x6307;&#x5B9A;&#x7D22;&#x5F15;&#x4F4D;&#x7F6E;&#xFF0C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x79FB;&#x52A8;&#x64CD;&#x4F5C;</p>\n<h2 id=\"lua&#x4E2D;&#x4F7F;&#x7528;&#x66F4;&#x591A;&#x7684;&#x4F7F;&#x7528;&#x5BF9;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x6765;&#x5B9E;&#x73B0;&#x6570;&#x636E;&#x7684;&#x4EA4;&#x4E92;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E9B;&#x5BF9;&#x6808;&#x64CD;&#x4F5C;&#x7684;api&#x6807;&#x51C6;&#x5728;unilua&#x4E2D;&#x4F9D;&#x7167;&#x6807;&#x51C6;&#x5B9E;&#x73B0;&#x4E86;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x540D;&#x5B57;&#x90FD;&#x53EA;&#x662F;&#x5C0F;&#x6539;&#x52A8;&#x4E86;&#x4E00;&#x4E9B;&#x6BD5;&#x7ADF;c&#x8DDF;c&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#x8FD8;&#x662F;&#x4E0D;&#x540C;&#x5728;&#x5BF9;&#x5806;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x4E2D;&#x662F;&#x7528;&#x7D22;&#x5F15;&#x6765;&#x8FDB;&#x884C;&#x5B9A;&#x4F4D;&#x7684;&#x6B63;&#x6570;&#x7D22;&#x5F15;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x53D6;&#x503C;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#x53D6;&#x503C;&#x4EE5;&#x6B63;&#x8D1F;1&#x5F00;&#x59CB;&#x5728;&#x5176;&#x4E2D;settop&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#x4E86;&#x7D22;&#x5F15;0&#x7528;&#x6765;&#x6E05;&#x7A7A;&#x5806;&#x6808;\"><a href=\"#LUA&#x4E2D;&#x4F7F;&#x7528;&#x66F4;&#x591A;&#x7684;&#x4F7F;&#x7528;&#x5BF9;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x6765;&#x5B9E;&#x73B0;&#x6570;&#x636E;&#x7684;&#x4EA4;&#x4E92;&#xFF01;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E9B;&#x5BF9;&#x6808;&#x64CD;&#x4F5C;&#x7684;API&#x6807;&#x51C6;&#xFF0C;&#x5728;UniLua&#x4E2D;&#xFF0C;&#x4F9D;&#x7167;&#x6807;&#x51C6;&#x5B9E;&#x73B0;&#x4E86;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#xFF0C;&#x540D;&#x5B57;&#x90FD;&#x53EA;&#x662F;&#x5C0F;&#x6539;&#x52A8;&#x4E86;&#x4E00;&#x4E9B;&#xFF0C;&#x6BD5;&#x7ADF;C-&#x8DDF;C&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#x8FD8;&#x662F;&#x4E0D;&#x540C;&#xFF01;&#x5728;&#x5BF9;&#x5806;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x4E2D;&#xFF0C;&#x662F;&#x7528;&#x7D22;&#x5F15;&#x6765;&#x8FDB;&#x884C;&#x5B9A;&#x4F4D;&#x7684;&#xFF0C;&#x6B63;&#x6570;&#x7D22;&#x5F15;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x53D6;&#x503C;&#xFF0C;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#x53D6;&#x503C;&#xFF08;&#x4EE5;&#x6B63;&#x8D1F;1&#x5F00;&#x59CB;&#xFF09;&#xFF01;&#x5728;&#x5176;&#x4E2D;settop&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#x4E86;&#x7D22;&#x5F15;0&#x7528;&#x6765;&#x6E05;&#x7A7A;&#x5806;&#x6808;\" class=\"headerlink\" title=\"LUA&#x4E2D;&#x4F7F;&#x7528;&#x66F4;&#x591A;&#x7684;&#x4F7F;&#x7528;&#x5BF9;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x6765;&#x5B9E;&#x73B0;&#x6570;&#x636E;&#x7684;&#x4EA4;&#x4E92;&#xFF01;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E9B;&#x5BF9;&#x6808;&#x64CD;&#x4F5C;&#x7684;API&#x6807;&#x51C6;&#xFF0C;&#x5728;UniLua&#x4E2D;&#xFF0C;&#x4F9D;&#x7167;&#x6807;&#x51C6;&#x5B9E;&#x73B0;&#x4E86;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#xFF0C;&#x540D;&#x5B57;&#x90FD;&#x53EA;&#x662F;&#x5C0F;&#x6539;&#x52A8;&#x4E86;&#x4E00;&#x4E9B;&#xFF0C;&#x6BD5;&#x7ADF;C#&#x8DDF;C&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#x8FD8;&#x662F;&#x4E0D;&#x540C;&#xFF01;&#x5728;&#x5BF9;&#x5806;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x4E2D;&#xFF0C;&#x662F;&#x7528;&#x7D22;&#x5F15;&#x6765;&#x8FDB;&#x884C;&#x5B9A;&#x4F4D;&#x7684;&#xFF0C;&#x6B63;&#x6570;&#x7D22;&#x5F15;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x53D6;&#x503C;&#xFF0C;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#x53D6;&#x503C;&#xFF08;&#x4EE5;&#x6B63;&#x8D1F;1&#x5F00;&#x59CB;&#xFF09;&#xFF01;&#x5728;&#x5176;&#x4E2D;settop&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#x4E86;&#x7D22;&#x5F15;0&#x7528;&#x6765;&#x6E05;&#x7A7A;&#x5806;&#x6808;\"></a>LUA&#x4E2D;&#x4F7F;&#x7528;&#x66F4;&#x591A;&#x7684;&#x4F7F;&#x7528;&#x5BF9;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x6765;&#x5B9E;&#x73B0;&#x6570;&#x636E;&#x7684;&#x4EA4;&#x4E92;&#xFF01;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E9B;&#x5BF9;&#x6808;&#x64CD;&#x4F5C;&#x7684;API&#x6807;&#x51C6;&#xFF0C;&#x5728;UniLua&#x4E2D;&#xFF0C;&#x4F9D;&#x7167;&#x6807;&#x51C6;&#x5B9E;&#x73B0;&#x4E86;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#xFF0C;&#x540D;&#x5B57;&#x90FD;&#x53EA;&#x662F;&#x5C0F;&#x6539;&#x52A8;&#x4E86;&#x4E00;&#x4E9B;&#xFF0C;&#x6BD5;&#x7ADF;C#&#x8DDF;C&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#x8FD8;&#x662F;&#x4E0D;&#x540C;&#xFF01;&#x5728;&#x5BF9;&#x5806;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x4E2D;&#xFF0C;&#x662F;&#x7528;&#x7D22;&#x5F15;&#x6765;&#x8FDB;&#x884C;&#x5B9A;&#x4F4D;&#x7684;&#xFF0C;&#x6B63;&#x6570;&#x7D22;&#x5F15;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x53D6;&#x503C;&#xFF0C;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#x53D6;&#x503C;&#xFF08;&#x4EE5;&#x6B63;&#x8D1F;1&#x5F00;&#x59CB;&#xFF09;&#xFF01;&#x5728;&#x5176;&#x4E2D;settop&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#x4E86;&#x7D22;&#x5F15;0&#x7528;&#x6765;&#x6E05;&#x7A7A;&#x5806;&#x6808;</h2><p>###&#x6269;&#x5C55;&#x4F60;&#x7684;&#x7A0B;&#x5E8F;<br>&#x505A;&#x4E3A;&#x914D;&#x7F6E;&#x8BED;&#x8A00;&#x662F;LUA&#x7684;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x5185;&#x5BB9;&#xFF01;</p>\n<p>&#x6253;&#x5F00;&#x5305;&#x5E76;&#x52A0;&#x8F7D;&#x51FD;&#x6570;&#x5E93;&#xFF0C;&#x52A0;&#x8F7D;&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x4FE1;&#x606F;&#x5757; &#xFF08;&#x53C2;&#x89C1;188&#x9875; &#xFF09;</p>\n<p>&#x5F15;&#x5165;table&#x7684;&#x6982;&#x5FF5;<br>&#x5982; &#xFF1B;&#x5728;Lua&#x6587;&#x4EF6;&#x4E2D;&#x8FDB;&#x884C;&#x8FD9;&#x6837;&#x7684;&#x5B9A;&#x4E49;&#xFF1A;BLUE={r=0,g=0,b=1} background=BLUE &#x5728;C&#x7A0B;&#x5E8F;&#x91CC;&#x9762;&#x5F15;&#x7528;getglobal(L,background); red=getfield(&#x201C;r&#x201D;) green=getfield(&#x201C;g&#x201D;)&#x2026;&#x2026;<br>getfield&#x51FD;&#x6570;&#x5728;&#x6807;&#x51C6;&#x7684;LUA&#x5E93;&#x91CC;&#x9762;&#x6CA1;&#x6709;&#x63D0;&#x4F9B;&#xFF0C;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x5B9E;&#x73B0;&#xFF0C;&#x5728;LuaAPI&#x4E2D;&#x63D0;&#x4F9B;&#x4E86;gettable&#x51FD;&#x6570;&#xFF0C;&#x4ED6;&#x63A5;&#x53D7;table&#x5728;&#x6808;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x5C06;&#x5BF9;&#x5E94;key&#x503C;&#x51FA;&#x6808;&#xFF0C;&#x8FD4;&#x56DE;&#x4E0E;key&#x5BF9;&#x5E94;&#x7684;value&#xFF01;<br>&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x5F0F;&#xFF0C;&#x5C06;&#x5BF9;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#x8FDB;&#x884C;&#x5C01;&#x88C5;&#xFF0C;&#x5C01;&#x88C5;&#x4E00;&#x4E2A;getfield&#x51FD;&#x6570;&#x6765;&#x65B9;&#x4FBF;&#x6211;&#x4EEC;&#x5BF9;table&#x4E2D;&#x503C;&#x7684;&#x53D6;&#x7684;&#x3002;</p>\n<p>###The Registry<br>registry &#x4E00;&#x76F4;&#x4F4D;&#x4E8E;&#x4E00;&#x4E2A;&#x7531;LUA_REGISTRYINDEX&#x5B9A;&#x4E49;&#x7684;&#x503C;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x5047;&#x7D22;&#x5F15;(pseudo-index)&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x4E00;&#x4E2A;&#x5047;&#x7D22;&#x5F15;&#x9664;&#x4E86;&#x4ED6;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E0D;&#x5728;&#x6808;&#x4E2D;&#x4E4B;&#x5916;&#xFF0C;&#x5176;&#x4ED6;&#x90FD;&#x7C7B;&#x4F3C;&#x4E8E;&#x6808;&#x4E2D;&#x7684;&#x7D22;&#x5F15;&#x3002;<br>registry&#x5C31;&#x662F;&#x666E;&#x901A;&#x7684;Lua&#x8868;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x975E;nil&#x7684;Lua&#x503C;&#x6765;&#x8BBF;&#x95EE;&#x5979;&#x7684;&#x5143;&#x7D20;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x7531;&#x4E8E;&#x6240;&#x6709;&#x7684;C&#x5E93;&#x5171;&#x4EAB;&#x76F8;&#x540C;&#x7684;registry &#xFF0C;&#x4F60;&#x5FC5;&#x987B;&#x6CE8;&#x610F;&#x4F7F;&#x7528;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#x503C;&#x4F5C;&#x4E3A;key&#xFF0C;&#x5426;&#x5219;&#x4F1A;&#x5BFC;&#x81F4;&#x547D;&#x540D;&#x51B2;&#x7A81;&#x3002;</p>\n<p>registry&#x5B9E;&#x73B0;&#x4E86;&#x5168;&#x5C40;&#x7684;&#x503C;&#xFF0C;upvalue&#x673A;&#x5236;&#x5B9E;&#x73B0;&#x4E86;&#x4E0E;C static&#x7B49;&#x4EF7;&#x7684;&#x4E1C;&#x897F;</p>\n","excerpt":"<p>###LUA学习记录：</p>\n<p>C API是一个C代码与Lua进行交互的函数集。他有以下部分组成：读写Lua全局变量的函数，调用Lua函数的函数，运行Lua代码片断的函数，注册C函数然后可以在Lua中被调用的函数，等等。</p>\n<p>在C和Lua之间通信关键内容在于一个虚拟的栈。几乎所有的API调用都是对栈上的值进行操作，所有C与Lua之间的数据交换也都通过这个栈来完成。另外，你也可以使用栈来保存临时变量。</p>\n<p>Lua库没有定义任何全局变量。它所有的状态保存在动态结构lua_State中，而且指向这个结构的指针作为所有Lua函数的一个参数。<br>","more":"</p>\n<p>###运行步骤：</p>\n<p>创建一个state并将标准库载入之后，就可以着手解释用户的输入了。对于用户输入的每一行，C程序首先调用luaL_loadbuffer编译这些Lua代码。如果没有错误，这个调用返回零并把编译之后的chunk压入栈。（记住，我们将在下一节中讨论魔法般的栈）之后，C程序调用lua_pcall，它将会把chunk从栈中弹出并在保护模式下运行它。和luaL_laodbuffer一样，lua_pcall在没有错误的情况下返回零。在有错误的情况下，这两个函数都将一条错误消息压入栈；我们可以用lua_tostring来得到这条信息、输出它，用lua_pop将它从栈中删除。</p>\n<p>###堆栈：关于栈的操作请参见Programing in Lua一书中的186页的一个函数<br>压入元素，API有一系列压栈的函数，他将每种可以用C来描述的Lua类型压栈（pushnil,pushnumber,pushboolean,pushstring）等等，第一参数都是luaState!<br>使用checkStack来检测栈是否有足够的空间！<br>有检测元素类型的函数，比如 isnumber之类的！</p>\n<p>###查询元素，tonumber,tostring之类的</p>\n<p>堆栈的操作，gettop返回堆栈元素个数，也是栈顶元素的索引！settop设置栈顶（堆栈中元素个数）为一个指定的值！如果开始的栈顶高于指定的栈顶，顶部的值将会被丢弃！settop(L,0)清空堆栈！<br>使用负数会设置堆栈顶到指定的索引！<br>pushvalue压入堆栈上指定索引的一个拷贝到栈顶！insert移动栈顶的元素到指定索引的位置，并将这个索引位置上面的元素全部上移至栈顶被移动后留下的空隔！<br>replace从栈顶弹出元素将其设置到指定索引位置，没有任何移动操作</p>\n<h2 id=\"LUA中使用更多的使用对栈的操作来实现数据的交互！提供了一些对栈操作的API标准，在UniLua中，依照标准实现了这些函数，名字都只是小改动了一些，毕竟C-跟C语法规则还是不同！在对堆栈的操作中，是用索引来进行定位的，正数索引自底向上取值，负数索引自顶向下取值（以正负1开始）！在其中settop函数中使用了索引0用来清空堆栈\"><a href=\"#LUA中使用更多的使用对栈的操作来实现数据的交互！提供了一些对栈操作的API标准，在UniLua中，依照标准实现了这些函数，名字都只是小改动了一些，毕竟C-跟C语法规则还是不同！在对堆栈的操作中，是用索引来进行定位的，正数索引自底向上取值，负数索引自顶向下取值（以正负1开始）！在其中settop函数中使用了索引0用来清空堆栈\" class=\"headerlink\" title=\"LUA中使用更多的使用对栈的操作来实现数据的交互！提供了一些对栈操作的API标准，在UniLua中，依照标准实现了这些函数，名字都只是小改动了一些，毕竟C#跟C语法规则还是不同！在对堆栈的操作中，是用索引来进行定位的，正数索引自底向上取值，负数索引自顶向下取值（以正负1开始）！在其中settop函数中使用了索引0用来清空堆栈\"></a>LUA中使用更多的使用对栈的操作来实现数据的交互！提供了一些对栈操作的API标准，在UniLua中，依照标准实现了这些函数，名字都只是小改动了一些，毕竟C#跟C语法规则还是不同！在对堆栈的操作中，是用索引来进行定位的，正数索引自底向上取值，负数索引自顶向下取值（以正负1开始）！在其中settop函数中使用了索引0用来清空堆栈</h2><p>###扩展你的程序<br>做为配置语言是LUA的一个重要内容！</p>\n<p>打开包并加载函数库，加载文件中的信息块 （参见188页 ）</p>\n<p>引入table的概念<br>如 ；在Lua文件中进行这样的定义：BLUE={r=0,g=0,b=1} background=BLUE 在C程序里面引用getglobal(L,background); red=getfield(“r”) green=getfield(“g”)……<br>getfield函数在标准的LUA库里面没有提供，需要自己实现，在LuaAPI中提供了gettable函数，他接受table在栈中的位置为参数，将对应key值出栈，返回与key对应的value！<br>也就是说，可以使用这个方式，将对栈的操作进行封装，封装一个getfield函数来方便我们对table中值的取的。</p>\n<p>###The Registry<br>registry 一直位于一个由LUA_REGISTRYINDEX定义的值所对应的假索引(pseudo-index)的位置。一个假索引除了他对应的值不在栈中之外，其他都类似于栈中的索引。<br>registry就是普通的Lua表，因此，你可以使用任何非nil的Lua值来访问她的元素。然而，由于所有的C库共享相同的registry ，你必须注意使用什么样的值作为key，否则会导致命名冲突。</p>\n<p>registry实现了全局的值，upvalue机制实现了与C static等价的东西</p>"},{"title":"搭建新的博客，独立域名","date":"2016-03-21T08:02:14.000Z","_content":"**更换所有的博客链接**\n\n__毫无疑问__\n*博客更换地址\n将原来的博客全部转移*\n_原博客地址放弃_","source":"_posts/搭建新的博客，独立域名.md","raw":"---\ntitle: 搭建新的博客，独立域名\ndate: 2016-03-21 16:02:14\ntags:\n---\n**更换所有的博客链接**\n\n__毫无疑问__\n*博客更换地址\n将原来的博客全部转移*\n_原博客地址放弃_","slug":"搭建新的博客，独立域名","published":1,"updated":"2016-03-21T08:51:43.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cim8yfwvv0003r8ko42503i7p","content":"<p><strong>&#x66F4;&#x6362;&#x6240;&#x6709;&#x7684;&#x535A;&#x5BA2;&#x94FE;&#x63A5;</strong></p>\n<p><strong>&#x6BEB;&#x65E0;&#x7591;&#x95EE;</strong><br><em>&#x535A;&#x5BA2;&#x66F4;&#x6362;&#x5730;&#x5740;<br>&#x5C06;&#x539F;&#x6765;&#x7684;&#x535A;&#x5BA2;&#x5168;&#x90E8;&#x8F6C;&#x79FB;</em><br><em>&#x539F;&#x535A;&#x5BA2;&#x5730;&#x5740;&#x653E;&#x5F03;</em></p>\n","excerpt":"","more":"<p><strong>更换所有的博客链接</strong></p>\n<p><strong>毫无疑问</strong><br><em>博客更换地址<br>将原来的博客全部转移</em><br><em>原博客地址放弃</em></p>\n"},{"title":"漫反射光照","date":"2016-03-21T11:16:21.000Z","_content":"在游戏开发过程中，光照应该是必不可少部分，当然，这是指大多数的稍微大型一些的3D游戏会需要，给模型或者山山水水加上光照，会看上去更加的真实，获得更好的体验。一个本身不发光物体显示什么颜色，在于本身反射什么颜色，比如一块石头，在太阳光的照射之后，你看到是红色的，而太阳光是白色的，白色是因为RGB组合而成，这快石头吸收了绿色和蓝色，反射了红色，那么你看到这块石头就会是红色的！\n\n那么谈到反射，就分为了漫反射（diffuse）和镜面反射（specular），先说漫反射\n<!--more-->\n因为表面凹凸不平，所有法线的方向也就不一致，那么反射的光线也就不一致，何为法线，所谓法线，就是垂直与表面的那条线（看到一个哥们儿说因为法线一定是垂直的线，像个公正不阿的法官，所以叫法线），入射光线到表面，令入射光线与反射光线的夹角相等，得到反射光线，而我们在计算中是试用dot(N,L)来得到一个值，N代表法线向量，L代表入射光线的向量表示，先对这两个向量进行归一化处理（使用normalize函数）所谓的归一化处理，即是让这个向量的模等于1（其实就是让向量除以他的模，这块可以参考3D图形学基础里面提到的向量部分），而dot函数的公式为向量点乘，即N*L=|N|*|L|cosΘ  由于之前对N与L进行了归一化处理，那么N*L=cosΘ，回顾一下三角函数，也就是说，入射光线与法线夹角在（0,90）之间，角度越大，那么值就越小。\n\n　　下面给出漫反射的公式：diffuse = Kd * lightColor * max(N·L,0)。\n\n　　首先kd为光强，也就是光照的强度，准确的说是材质对光的反射系数，在0到1 之间，根据名称可以自己想象一下。其次lightColor，这玩意儿是指光的颜色，它里面有rgb三个分量，用句牛逼的话说，世界上所有的颜色都可以用RGB来表示，通过在计算机中RGB三个不同的值可以匹配出无数种颜色，8bit的颜色通道可以表示出0-255，那么256的3次方，就可以组合得到16777216种颜色，当然，人的眼睛貌似感觉不到那么多颜色，扯远了，回到刚刚那个话题，光的颜色有了，在乘以max(N*L,0)，为什么要这样做？因为如果夹角大于90度，那么就会出现负数，负数是没有意义的（至于为什么会出现大于90度的情况，请发挥空间想象能力（脑补）），这样就得到了漫反射的颜色值了！！！\n\n（就是简单是梳理一下思路！漫反射的代码，待会儿上传一下，作为总结）","source":"_posts/漫反射光照.md","raw":"---\ntitle: 漫反射光照\ndate: 2016-03-21 19:16:21\ntags:\n---\n在游戏开发过程中，光照应该是必不可少部分，当然，这是指大多数的稍微大型一些的3D游戏会需要，给模型或者山山水水加上光照，会看上去更加的真实，获得更好的体验。一个本身不发光物体显示什么颜色，在于本身反射什么颜色，比如一块石头，在太阳光的照射之后，你看到是红色的，而太阳光是白色的，白色是因为RGB组合而成，这快石头吸收了绿色和蓝色，反射了红色，那么你看到这块石头就会是红色的！\n\n那么谈到反射，就分为了漫反射（diffuse）和镜面反射（specular），先说漫反射\n<!--more-->\n因为表面凹凸不平，所有法线的方向也就不一致，那么反射的光线也就不一致，何为法线，所谓法线，就是垂直与表面的那条线（看到一个哥们儿说因为法线一定是垂直的线，像个公正不阿的法官，所以叫法线），入射光线到表面，令入射光线与反射光线的夹角相等，得到反射光线，而我们在计算中是试用dot(N,L)来得到一个值，N代表法线向量，L代表入射光线的向量表示，先对这两个向量进行归一化处理（使用normalize函数）所谓的归一化处理，即是让这个向量的模等于1（其实就是让向量除以他的模，这块可以参考3D图形学基础里面提到的向量部分），而dot函数的公式为向量点乘，即N*L=|N|*|L|cosΘ  由于之前对N与L进行了归一化处理，那么N*L=cosΘ，回顾一下三角函数，也就是说，入射光线与法线夹角在（0,90）之间，角度越大，那么值就越小。\n\n　　下面给出漫反射的公式：diffuse = Kd * lightColor * max(N·L,0)。\n\n　　首先kd为光强，也就是光照的强度，准确的说是材质对光的反射系数，在0到1 之间，根据名称可以自己想象一下。其次lightColor，这玩意儿是指光的颜色，它里面有rgb三个分量，用句牛逼的话说，世界上所有的颜色都可以用RGB来表示，通过在计算机中RGB三个不同的值可以匹配出无数种颜色，8bit的颜色通道可以表示出0-255，那么256的3次方，就可以组合得到16777216种颜色，当然，人的眼睛貌似感觉不到那么多颜色，扯远了，回到刚刚那个话题，光的颜色有了，在乘以max(N*L,0)，为什么要这样做？因为如果夹角大于90度，那么就会出现负数，负数是没有意义的（至于为什么会出现大于90度的情况，请发挥空间想象能力（脑补）），这样就得到了漫反射的颜色值了！！！\n\n（就是简单是梳理一下思路！漫反射的代码，待会儿上传一下，作为总结）","slug":"漫反射光照","published":1,"updated":"2016-03-22T04:25:22.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cim8yfwvw0004r8kotk6gubmj","content":"<p>&#x5728;&#x6E38;&#x620F;&#x5F00;&#x53D1;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5149;&#x7167;&#x5E94;&#x8BE5;&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x90E8;&#x5206;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x662F;&#x6307;&#x5927;&#x591A;&#x6570;&#x7684;&#x7A0D;&#x5FAE;&#x5927;&#x578B;&#x4E00;&#x4E9B;&#x7684;3D&#x6E38;&#x620F;&#x4F1A;&#x9700;&#x8981;&#xFF0C;&#x7ED9;&#x6A21;&#x578B;&#x6216;&#x8005;&#x5C71;&#x5C71;&#x6C34;&#x6C34;&#x52A0;&#x4E0A;&#x5149;&#x7167;&#xFF0C;&#x4F1A;&#x770B;&#x4E0A;&#x53BB;&#x66F4;&#x52A0;&#x7684;&#x771F;&#x5B9E;&#xFF0C;&#x83B7;&#x5F97;&#x66F4;&#x597D;&#x7684;&#x4F53;&#x9A8C;&#x3002;&#x4E00;&#x4E2A;&#x672C;&#x8EAB;&#x4E0D;&#x53D1;&#x5149;&#x7269;&#x4F53;&#x663E;&#x793A;&#x4EC0;&#x4E48;&#x989C;&#x8272;&#xFF0C;&#x5728;&#x4E8E;&#x672C;&#x8EAB;&#x53CD;&#x5C04;&#x4EC0;&#x4E48;&#x989C;&#x8272;&#xFF0C;&#x6BD4;&#x5982;&#x4E00;&#x5757;&#x77F3;&#x5934;&#xFF0C;&#x5728;&#x592A;&#x9633;&#x5149;&#x7684;&#x7167;&#x5C04;&#x4E4B;&#x540E;&#xFF0C;&#x4F60;&#x770B;&#x5230;&#x662F;&#x7EA2;&#x8272;&#x7684;&#xFF0C;&#x800C;&#x592A;&#x9633;&#x5149;&#x662F;&#x767D;&#x8272;&#x7684;&#xFF0C;&#x767D;&#x8272;&#x662F;&#x56E0;&#x4E3A;RGB&#x7EC4;&#x5408;&#x800C;&#x6210;&#xFF0C;&#x8FD9;&#x5FEB;&#x77F3;&#x5934;&#x5438;&#x6536;&#x4E86;&#x7EFF;&#x8272;&#x548C;&#x84DD;&#x8272;&#xFF0C;&#x53CD;&#x5C04;&#x4E86;&#x7EA2;&#x8272;&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x770B;&#x5230;&#x8FD9;&#x5757;&#x77F3;&#x5934;&#x5C31;&#x4F1A;&#x662F;&#x7EA2;&#x8272;&#x7684;&#xFF01;</p>\n<p>&#x90A3;&#x4E48;&#x8C08;&#x5230;&#x53CD;&#x5C04;&#xFF0C;&#x5C31;&#x5206;&#x4E3A;&#x4E86;&#x6F2B;&#x53CD;&#x5C04;&#xFF08;diffuse&#xFF09;&#x548C;&#x955C;&#x9762;&#x53CD;&#x5C04;&#xFF08;specular&#xFF09;&#xFF0C;&#x5148;&#x8BF4;&#x6F2B;&#x53CD;&#x5C04;<br><a id=\"more\"></a><br>&#x56E0;&#x4E3A;&#x8868;&#x9762;&#x51F9;&#x51F8;&#x4E0D;&#x5E73;&#xFF0C;&#x6240;&#x6709;&#x6CD5;&#x7EBF;&#x7684;&#x65B9;&#x5411;&#x4E5F;&#x5C31;&#x4E0D;&#x4E00;&#x81F4;&#xFF0C;&#x90A3;&#x4E48;&#x53CD;&#x5C04;&#x7684;&#x5149;&#x7EBF;&#x4E5F;&#x5C31;&#x4E0D;&#x4E00;&#x81F4;&#xFF0C;&#x4F55;&#x4E3A;&#x6CD5;&#x7EBF;&#xFF0C;&#x6240;&#x8C13;&#x6CD5;&#x7EBF;&#xFF0C;&#x5C31;&#x662F;&#x5782;&#x76F4;&#x4E0E;&#x8868;&#x9762;&#x7684;&#x90A3;&#x6761;&#x7EBF;&#xFF08;&#x770B;&#x5230;&#x4E00;&#x4E2A;&#x54E5;&#x4EEC;&#x513F;&#x8BF4;&#x56E0;&#x4E3A;&#x6CD5;&#x7EBF;&#x4E00;&#x5B9A;&#x662F;&#x5782;&#x76F4;&#x7684;&#x7EBF;&#xFF0C;&#x50CF;&#x4E2A;&#x516C;&#x6B63;&#x4E0D;&#x963F;&#x7684;&#x6CD5;&#x5B98;&#xFF0C;&#x6240;&#x4EE5;&#x53EB;&#x6CD5;&#x7EBF;&#xFF09;&#xFF0C;&#x5165;&#x5C04;&#x5149;&#x7EBF;&#x5230;&#x8868;&#x9762;&#xFF0C;&#x4EE4;&#x5165;&#x5C04;&#x5149;&#x7EBF;&#x4E0E;&#x53CD;&#x5C04;&#x5149;&#x7EBF;&#x7684;&#x5939;&#x89D2;&#x76F8;&#x7B49;&#xFF0C;&#x5F97;&#x5230;&#x53CD;&#x5C04;&#x5149;&#x7EBF;&#xFF0C;&#x800C;&#x6211;&#x4EEC;&#x5728;&#x8BA1;&#x7B97;&#x4E2D;&#x662F;&#x8BD5;&#x7528;dot(N,L)&#x6765;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x503C;&#xFF0C;N&#x4EE3;&#x8868;&#x6CD5;&#x7EBF;&#x5411;&#x91CF;&#xFF0C;L&#x4EE3;&#x8868;&#x5165;&#x5C04;&#x5149;&#x7EBF;&#x7684;&#x5411;&#x91CF;&#x8868;&#x793A;&#xFF0C;&#x5148;&#x5BF9;&#x8FD9;&#x4E24;&#x4E2A;&#x5411;&#x91CF;&#x8FDB;&#x884C;&#x5F52;&#x4E00;&#x5316;&#x5904;&#x7406;&#xFF08;&#x4F7F;&#x7528;normalize&#x51FD;&#x6570;&#xFF09;&#x6240;&#x8C13;&#x7684;&#x5F52;&#x4E00;&#x5316;&#x5904;&#x7406;&#xFF0C;&#x5373;&#x662F;&#x8BA9;&#x8FD9;&#x4E2A;&#x5411;&#x91CF;&#x7684;&#x6A21;&#x7B49;&#x4E8E;1&#xFF08;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x8BA9;&#x5411;&#x91CF;&#x9664;&#x4EE5;&#x4ED6;&#x7684;&#x6A21;&#xFF0C;&#x8FD9;&#x5757;&#x53EF;&#x4EE5;&#x53C2;&#x8003;3D&#x56FE;&#x5F62;&#x5B66;&#x57FA;&#x7840;&#x91CC;&#x9762;&#x63D0;&#x5230;&#x7684;&#x5411;&#x91CF;&#x90E8;&#x5206;&#xFF09;&#xFF0C;&#x800C;dot&#x51FD;&#x6570;&#x7684;&#x516C;&#x5F0F;&#x4E3A;&#x5411;&#x91CF;&#x70B9;&#x4E58;&#xFF0C;&#x5373;N<em>L=|N|</em>|L|cos&#x398;  &#x7531;&#x4E8E;&#x4E4B;&#x524D;&#x5BF9;N&#x4E0E;L&#x8FDB;&#x884C;&#x4E86;&#x5F52;&#x4E00;&#x5316;&#x5904;&#x7406;&#xFF0C;&#x90A3;&#x4E48;N*L=cos&#x398;&#xFF0C;&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#x4E09;&#x89D2;&#x51FD;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5165;&#x5C04;&#x5149;&#x7EBF;&#x4E0E;&#x6CD5;&#x7EBF;&#x5939;&#x89D2;&#x5728;&#xFF08;0,90&#xFF09;&#x4E4B;&#x95F4;&#xFF0C;&#x89D2;&#x5EA6;&#x8D8A;&#x5927;&#xFF0C;&#x90A3;&#x4E48;&#x503C;&#x5C31;&#x8D8A;&#x5C0F;&#x3002;</p>\n<p>&#x3000;&#x3000;&#x4E0B;&#x9762;&#x7ED9;&#x51FA;&#x6F2B;&#x53CD;&#x5C04;&#x7684;&#x516C;&#x5F0F;&#xFF1A;diffuse = Kd <em> lightColor </em> max(N&#xB7;L,0)&#x3002;</p>\n<p>&#x3000;&#x3000;&#x9996;&#x5148;kd&#x4E3A;&#x5149;&#x5F3A;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5149;&#x7167;&#x7684;&#x5F3A;&#x5EA6;&#xFF0C;&#x51C6;&#x786E;&#x7684;&#x8BF4;&#x662F;&#x6750;&#x8D28;&#x5BF9;&#x5149;&#x7684;&#x53CD;&#x5C04;&#x7CFB;&#x6570;&#xFF0C;&#x5728;0&#x5230;1 &#x4E4B;&#x95F4;&#xFF0C;&#x6839;&#x636E;&#x540D;&#x79F0;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x60F3;&#x8C61;&#x4E00;&#x4E0B;&#x3002;&#x5176;&#x6B21;lightColor&#xFF0C;&#x8FD9;&#x73A9;&#x610F;&#x513F;&#x662F;&#x6307;&#x5149;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x5B83;&#x91CC;&#x9762;&#x6709;rgb&#x4E09;&#x4E2A;&#x5206;&#x91CF;&#xFF0C;&#x7528;&#x53E5;&#x725B;&#x903C;&#x7684;&#x8BDD;&#x8BF4;&#xFF0C;&#x4E16;&#x754C;&#x4E0A;&#x6240;&#x6709;&#x7684;&#x989C;&#x8272;&#x90FD;&#x53EF;&#x4EE5;&#x7528;RGB&#x6765;&#x8868;&#x793A;&#xFF0C;&#x901A;&#x8FC7;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4E2D;RGB&#x4E09;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x503C;&#x53EF;&#x4EE5;&#x5339;&#x914D;&#x51FA;&#x65E0;&#x6570;&#x79CD;&#x989C;&#x8272;&#xFF0C;8bit&#x7684;&#x989C;&#x8272;&#x901A;&#x9053;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x51FA;0-255&#xFF0C;&#x90A3;&#x4E48;256&#x7684;3&#x6B21;&#x65B9;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x7EC4;&#x5408;&#x5F97;&#x5230;16777216&#x79CD;&#x989C;&#x8272;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x4EBA;&#x7684;&#x773C;&#x775B;&#x8C8C;&#x4F3C;&#x611F;&#x89C9;&#x4E0D;&#x5230;&#x90A3;&#x4E48;&#x591A;&#x989C;&#x8272;&#xFF0C;&#x626F;&#x8FDC;&#x4E86;&#xFF0C;&#x56DE;&#x5230;&#x521A;&#x521A;&#x90A3;&#x4E2A;&#x8BDD;&#x9898;&#xFF0C;&#x5149;&#x7684;&#x989C;&#x8272;&#x6709;&#x4E86;&#xFF0C;&#x5728;&#x4E58;&#x4EE5;max(N*L,0)&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x8FD9;&#x6837;&#x505A;&#xFF1F;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x5939;&#x89D2;&#x5927;&#x4E8E;90&#x5EA6;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x8D1F;&#x6570;&#xFF0C;&#x8D1F;&#x6570;&#x662F;&#x6CA1;&#x6709;&#x610F;&#x4E49;&#x7684;&#xFF08;&#x81F3;&#x4E8E;&#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x51FA;&#x73B0;&#x5927;&#x4E8E;90&#x5EA6;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x8BF7;&#x53D1;&#x6325;&#x7A7A;&#x95F4;&#x60F3;&#x8C61;&#x80FD;&#x529B;&#xFF08;&#x8111;&#x8865;&#xFF09;&#xFF09;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x5F97;&#x5230;&#x4E86;&#x6F2B;&#x53CD;&#x5C04;&#x7684;&#x989C;&#x8272;&#x503C;&#x4E86;&#xFF01;&#xFF01;&#xFF01;</p>\n<p>&#xFF08;&#x5C31;&#x662F;&#x7B80;&#x5355;&#x662F;&#x68B3;&#x7406;&#x4E00;&#x4E0B;&#x601D;&#x8DEF;&#xFF01;&#x6F2B;&#x53CD;&#x5C04;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5F85;&#x4F1A;&#x513F;&#x4E0A;&#x4F20;&#x4E00;&#x4E0B;&#xFF0C;&#x4F5C;&#x4E3A;&#x603B;&#x7ED3;&#xFF09;</p>\n","excerpt":"<p>在游戏开发过程中，光照应该是必不可少部分，当然，这是指大多数的稍微大型一些的3D游戏会需要，给模型或者山山水水加上光照，会看上去更加的真实，获得更好的体验。一个本身不发光物体显示什么颜色，在于本身反射什么颜色，比如一块石头，在太阳光的照射之后，你看到是红色的，而太阳光是白色的，白色是因为RGB组合而成，这快石头吸收了绿色和蓝色，反射了红色，那么你看到这块石头就会是红色的！</p>\n<p>那么谈到反射，就分为了漫反射（diffuse）和镜面反射（specular），先说漫反射<br>","more":"<br>因为表面凹凸不平，所有法线的方向也就不一致，那么反射的光线也就不一致，何为法线，所谓法线，就是垂直与表面的那条线（看到一个哥们儿说因为法线一定是垂直的线，像个公正不阿的法官，所以叫法线），入射光线到表面，令入射光线与反射光线的夹角相等，得到反射光线，而我们在计算中是试用dot(N,L)来得到一个值，N代表法线向量，L代表入射光线的向量表示，先对这两个向量进行归一化处理（使用normalize函数）所谓的归一化处理，即是让这个向量的模等于1（其实就是让向量除以他的模，这块可以参考3D图形学基础里面提到的向量部分），而dot函数的公式为向量点乘，即N<em>L=|N|</em>|L|cosΘ  由于之前对N与L进行了归一化处理，那么N*L=cosΘ，回顾一下三角函数，也就是说，入射光线与法线夹角在（0,90）之间，角度越大，那么值就越小。</p>\n<p>　　下面给出漫反射的公式：diffuse = Kd <em> lightColor </em> max(N·L,0)。</p>\n<p>　　首先kd为光强，也就是光照的强度，准确的说是材质对光的反射系数，在0到1 之间，根据名称可以自己想象一下。其次lightColor，这玩意儿是指光的颜色，它里面有rgb三个分量，用句牛逼的话说，世界上所有的颜色都可以用RGB来表示，通过在计算机中RGB三个不同的值可以匹配出无数种颜色，8bit的颜色通道可以表示出0-255，那么256的3次方，就可以组合得到16777216种颜色，当然，人的眼睛貌似感觉不到那么多颜色，扯远了，回到刚刚那个话题，光的颜色有了，在乘以max(N*L,0)，为什么要这样做？因为如果夹角大于90度，那么就会出现负数，负数是没有意义的（至于为什么会出现大于90度的情况，请发挥空间想象能力（脑补）），这样就得到了漫反射的颜色值了！！！</p>\n<p>（就是简单是梳理一下思路！漫反射的代码，待会儿上传一下，作为总结）</p>"},{"title":"线性插值","date":"2016-03-21T11:14:31.000Z","_content":"###线性插值\n  线性插值是数学、计算机图形学等领域广泛使用的一种简单插值方法。 \n  假设我们已知坐标(x0,y0)与(x1,y1),要得到[x0,x1]区间内某一位置x在直线上的值。根据图中所示，我们得到（y-y0）(x-x0)/(y1-y0)(x1-x0) \n  假设方程两边的值为α，那么这个值就是插值系数—从x0到x的距离与从x0到x1距离的比值。由于x值已知，所以可以从公式得到α的值 \n  α=(x-x0)/(x1-x0) \n  同样，α=(y-y0)/(y1-y0) \n  这样，在代数上就可以表示成为： \n  <!--more-->\n  y = (1- α)y0 + αy1 \n  或者， \n  y = y0 + α(y1 - y0) \n  这样通过α就可以直接得到 y。实际上，即使x不在x0到x1之间并且α也不是介于0到1之间，这个公式也是成立的。在这种情况下，这种方法叫作线性外插—参见 外插值。 \n  已知y求x的过程与以上过程相同，只是x与y要进行交换。","source":"_posts/线性插值.md","raw":"---\ntitle: 线性插值\ndate: 2016-03-21 19:14:31\ntags:\n---\n###线性插值\n  线性插值是数学、计算机图形学等领域广泛使用的一种简单插值方法。 \n  假设我们已知坐标(x0,y0)与(x1,y1),要得到[x0,x1]区间内某一位置x在直线上的值。根据图中所示，我们得到（y-y0）(x-x0)/(y1-y0)(x1-x0) \n  假设方程两边的值为α，那么这个值就是插值系数—从x0到x的距离与从x0到x1距离的比值。由于x值已知，所以可以从公式得到α的值 \n  α=(x-x0)/(x1-x0) \n  同样，α=(y-y0)/(y1-y0) \n  这样，在代数上就可以表示成为： \n  <!--more-->\n  y = (1- α)y0 + αy1 \n  或者， \n  y = y0 + α(y1 - y0) \n  这样通过α就可以直接得到 y。实际上，即使x不在x0到x1之间并且α也不是介于0到1之间，这个公式也是成立的。在这种情况下，这种方法叫作线性外插—参见 外插值。 \n  已知y求x的过程与以上过程相同，只是x与y要进行交换。","slug":"线性插值","published":1,"updated":"2016-03-22T04:24:50.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cim8yfwvy0005r8kowhhk1fju","content":"<p>###&#x7EBF;&#x6027;&#x63D2;&#x503C;<br>  &#x7EBF;&#x6027;&#x63D2;&#x503C;&#x662F;&#x6570;&#x5B66;&#x3001;&#x8BA1;&#x7B97;&#x673A;&#x56FE;&#x5F62;&#x5B66;&#x7B49;&#x9886;&#x57DF;&#x5E7F;&#x6CDB;&#x4F7F;&#x7528;&#x7684;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x63D2;&#x503C;&#x65B9;&#x6CD5;&#x3002;<br>  &#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x5DF2;&#x77E5;&#x5750;&#x6807;(x0,y0)&#x4E0E;(x1,y1),&#x8981;&#x5F97;&#x5230;[x0,x1]&#x533A;&#x95F4;&#x5185;&#x67D0;&#x4E00;&#x4F4D;&#x7F6E;x&#x5728;&#x76F4;&#x7EBF;&#x4E0A;&#x7684;&#x503C;&#x3002;&#x6839;&#x636E;&#x56FE;&#x4E2D;&#x6240;&#x793A;&#xFF0C;&#x6211;&#x4EEC;&#x5F97;&#x5230;&#xFF08;y-y0&#xFF09;(x-x0)/(y1-y0)(x1-x0)<br>  &#x5047;&#x8BBE;&#x65B9;&#x7A0B;&#x4E24;&#x8FB9;&#x7684;&#x503C;&#x4E3A;&#x3B1;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x503C;&#x5C31;&#x662F;&#x63D2;&#x503C;&#x7CFB;&#x6570;&#x2014;&#x4ECE;x0&#x5230;x&#x7684;&#x8DDD;&#x79BB;&#x4E0E;&#x4ECE;x0&#x5230;x1&#x8DDD;&#x79BB;&#x7684;&#x6BD4;&#x503C;&#x3002;&#x7531;&#x4E8E;x&#x503C;&#x5DF2;&#x77E5;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x4ECE;&#x516C;&#x5F0F;&#x5F97;&#x5230;&#x3B1;&#x7684;&#x503C;<br>  &#x3B1;=(x-x0)/(x1-x0)<br>  &#x540C;&#x6837;&#xFF0C;&#x3B1;=(y-y0)/(y1-y0)<br>  &#x8FD9;&#x6837;&#xFF0C;&#x5728;&#x4EE3;&#x6570;&#x4E0A;&#x5C31;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x6210;&#x4E3A;&#xFF1A;<br>  <a id=\"more\"></a><br>  y = (1- &#x3B1;)y0 + &#x3B1;y1<br>  &#x6216;&#x8005;&#xFF0C;<br>  y = y0 + &#x3B1;(y1 - y0)<br>  &#x8FD9;&#x6837;&#x901A;&#x8FC7;&#x3B1;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5F97;&#x5230; y&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x5373;&#x4F7F;x&#x4E0D;&#x5728;x0&#x5230;x1&#x4E4B;&#x95F4;&#x5E76;&#x4E14;&#x3B1;&#x4E5F;&#x4E0D;&#x662F;&#x4ECB;&#x4E8E;0&#x5230;1&#x4E4B;&#x95F4;&#xFF0C;&#x8FD9;&#x4E2A;&#x516C;&#x5F0F;&#x4E5F;&#x662F;&#x6210;&#x7ACB;&#x7684;&#x3002;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x53EB;&#x4F5C;&#x7EBF;&#x6027;&#x5916;&#x63D2;&#x2014;&#x53C2;&#x89C1; &#x5916;&#x63D2;&#x503C;&#x3002;<br>  &#x5DF2;&#x77E5;y&#x6C42;x&#x7684;&#x8FC7;&#x7A0B;&#x4E0E;&#x4EE5;&#x4E0A;&#x8FC7;&#x7A0B;&#x76F8;&#x540C;&#xFF0C;&#x53EA;&#x662F;x&#x4E0E;y&#x8981;&#x8FDB;&#x884C;&#x4EA4;&#x6362;&#x3002;</p>\n","excerpt":"<p>###线性插值<br>  线性插值是数学、计算机图形学等领域广泛使用的一种简单插值方法。<br>  假设我们已知坐标(x0,y0)与(x1,y1),要得到[x0,x1]区间内某一位置x在直线上的值。根据图中所示，我们得到（y-y0）(x-x0)/(y1-y0)(x1-x0)<br>  假设方程两边的值为α，那么这个值就是插值系数—从x0到x的距离与从x0到x1距离的比值。由于x值已知，所以可以从公式得到α的值<br>  α=(x-x0)/(x1-x0)<br>  同样，α=(y-y0)/(y1-y0)<br>  这样，在代数上就可以表示成为：<br>","more":"<br>  y = (1- α)y0 + αy1<br>  或者，<br>  y = y0 + α(y1 - y0)<br>  这样通过α就可以直接得到 y。实际上，即使x不在x0到x1之间并且α也不是介于0到1之间，这个公式也是成立的。在这种情况下，这种方法叫作线性外插—参见 外插值。<br>  已知y求x的过程与以上过程相同，只是x与y要进行交换。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}